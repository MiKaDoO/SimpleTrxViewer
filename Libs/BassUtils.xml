<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BassUtils</name>
    </assembly>
    <members>
        <member name="T:BassUtils.AppDomainExtensions">
            <summary>
            Extensions for the AppDomain class.
            </summary>
        </member>
        <member name="M:BassUtils.AppDomainExtensions.IsLoaded(System.AppDomain,System.String)">
            <summary>
            Checks to see if an assembly is already loaded. The comparison is based on the FullName
            property of the assembly.
            </summary>
            <param name="domain">The domain.</param>
            <param name="path">Path to the file containing the assembly to check for.</param>
            <returns>True if the assembly is already loaded, false otherwise.</returns>
        </member>
        <member name="T:BassUtils.ConfigurationLoader">
            <summary>
            This is designed to handle Custom Configuration Section in an Application Configuration file.
            Inherit this class to produce a class which will automatically load the data from the config
            file. This can save a huge amount of boilerplate; there is extensive documentation in the
            class source file (available on Github) and a full working example in the BassUtils.Test project.
            </summary>
        </member>
        <member name="M:BassUtils.ConfigurationLoader.#ctor">
            <summary>
            Initialise a new instance of the ConfigLoader.
            </summary>
        </member>
        <member name="M:BassUtils.ConfigurationLoader.#ctor(System.Boolean)">
            <summary>
            Initialise a new instance of the ConfigLoader.
            </summary>
            <param name="load">Whether to load the configuration from file.</param>
        </member>
        <member name="M:BassUtils.ConfigurationLoader.#ctor(System.String)">
            <summary>
            Initialise a new instance of the ConfigLoader. Use this overload when you have
            one type that can be used to load several different configuration sections.
            </summary>
            <param name="sectionName">The name of the configuration section to load. Can be null,
            in which case the name of the first section is used.</param>
        </member>
        <member name="M:BassUtils.ConfigurationLoader.Load">
            <summary>
            Loads or reloads this configuration from the config file.
            Uses the name of the first section associated with this type.
            </summary>
        </member>
        <member name="M:BassUtils.ConfigurationLoader.Load(System.String)">
            <summary>
            Loads or reloads this configuration from the config file.
            </summary>
            <param name="sectionName">The name of the configuration section to load.</param>
        </member>
        <member name="M:BassUtils.ConfigurationLoader.InnerLoad(System.String)">
            <summary>
            Loads the configuration.
            </summary>
            <param name="sectionName">The name of the section to load. Can be null, in which
            case it will be automatically determined by using the first name in app.config
            that is associated with this type.</param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">If there are validation errors or any other errors
            when loading the section.</exception>
            <returns>Loaded configuration object.</returns>
        </member>
        <member name="M:BassUtils.ConfigurationLoader.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            A method which is called by the CLR when parsing the App.Config file. If custom sections
            are found, then an entry in the configuration file will tell the runtime to call this method,
            passing in the XmlNode required.
            </summary>
            <param name="parent">The configuration settings in a corresponding parent configuration section.</param>
            <param name="configContext">An HttpConfigurationContext when Create is called from the ASP.NET configuration system. Otherwise,
            this parameter is reserved and is a null reference (Nothing in Visual Basic).</param>
            <param name="section">The <see cref="T:System.Xml.XmlNode"/> that contains the configuration information from the configuration file.
            Provides direct access to the XML contents of the configuration section.</param>
            <returns>The deserialized representation of the configuration section.</returns>
            <exception cref="T:System.Configuration.ConfigurationException">The Configuration file is not well formed,
            or the Custom section is not configured correctly, or the type of configuration handler was not specified correctly
            or the type of object was not specified correctly.
            </exception>
        </member>
        <member name="M:BassUtils.ConfigurationLoader.GetFirstConfigurationSectionName">
            <summary>
            Finds the name of the configuration section that is handling this type, or returns null
            if no such section can be found.
            </summary>
            <returns>The name of the ConfigurationSection, or null if no matches are found.</returns>
        </member>
        <member name="M:BassUtils.ConfigurationLoader.GetFirstSectionForThisType">
            <summary>
            Find the first configuration section designed to handle this type. This is done by scanning
            the configSections element in the config file for a section that is implementing this type.
            </summary>
            <returns>The matching ConfigurationSection object, or null if no matches are found.</returns>
        </member>
        <member name="M:BassUtils.ConfigurationLoader.IsSectionForThisType(System.Configuration.ConfigurationSection)">
            <summary>
            Determine whether a configuration section is designed to handle this type
            by checking the "type" property of the declaration refers to this type.
            </summary>
            <param name="section">The section to check.</param>
            <returns>True if the section is for this type, false otherwise.</returns>
        </member>
        <member name="M:BassUtils.ConfigurationLoader.ApplyDefaultValues(System.Object)">
            <summary>
            Finds all properties in the object that have a <code>DefaultValueAttribute</code>
            on them and sets them if the properties currently have the same value as the
            default for their type, e.g. only set the value if numbers are 0, strings are null, etc.
            </summary>
            <param name="value">Thing to set defaults on.</param>
        </member>
        <member name="M:BassUtils.ConfigurationLoader.ValidateLoadedObject(System.Object)">
            <summary>
            Check that the loaded object is valid. You can apply any validation
            attribute that you want (even your own, use custom messages etc.).
            </summary>
            <param name="thing">Deserialized section object.</param>
        </member>
        <member name="M:BassUtils.ConfigurationLoader.ErrorsToString(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult},System.Xml.XmlNode)">
            <summary>
            Render any configuration errors down to a useful string.
            </summary>
            <param name="errors">Set of errors.</param>
            <param name="section">The XmlNode section, used to get the name.</param>
            <returns>String rep.</returns>
        </member>
        <member name="T:BassUtils.Conv">
            <summary>
            A class for doing conversions, in the style of System.Convert.
            </summary>
        </member>
        <member name="F:BassUtils.Conv.trueStrings">
            <summary>
            The set of strings that are considered to equate to <c>true</c> by the
            <see cref="M:BassUtils.Conv.ToBoolean(System.Object)"/> method.
            The strings are used in case-insensitive comparisons.
            </summary>
        </member>
        <member name="F:BassUtils.Conv.falseStrings">
            <summary>
            The set of strings that are considered to equate to <c>false</c> by the
            <see cref="M:BassUtils.Conv.ToBoolean(System.Object)"/> method.
            The strings are used in case-insensitive comparisons.
            </summary>
        </member>
        <member name="M:BassUtils.Conv.ToEnum(System.Type,System.Object)">
            <summary>
            Convert a <paramref name="value"/> to the corresponding enumeration value. First checks to see if the
            <paramref name="value"/> is an integer, it is is then tries to cast the number to the enum value. If the
            value is not a number and is a <c>Char</c> or a <c>String</c> of length 1, then convert that
            character to an integer and try and cast it to the enum value. Otherwise, if the <paramref name="value"/>
            is a string of more than length 1, try and match the enum by name using <c>Enum.Parse</c>.
            </summary>
            <param name="enumType">The target enum type.</param>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.InvalidOperationException">T is not an enum type.</exception>
            <exception cref="T:System.InvalidCastException">The value cannot be converted.</exception>
            <returns>An enum value of the specified type.</returns>
        </member>
        <member name="M:BassUtils.Conv.ToEnum``1(System.Object)">
            <summary>
            Convert a <paramref name="value"/> to the corresponding enumeration value. First checks to see if the
            <paramref name="value"/> is a number, it is is then tries to cast the number to the enum value. If the
            value is not a number and is a <c>Char</c> or a <c>String</c> of length 1, then convert that
            character to an integer and try and cast it to the enum value. Otherwise, if the <paramref name="value"/>
            is a string of more than length 1, try and match the enum by name using <c>Enum.Parse</c>.
            </summary>
            <typeparam name="T">The target enum type.</typeparam>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.InvalidOperationException">T is not an enum type.</exception>
            <exception cref="T:System.InvalidCastException">The value cannot be converted.</exception>
            <returns>An enum value of the specified type.</returns>
        </member>
        <member name="M:BassUtils.Conv.ToBoolean(System.Object)">
            <summary>
            Convert a <paramref name="value"/> to a <c>Boolean</c>. If the <paramref name="value"/> is a
            number, then return false if it is 0, else true. If the <paramref name="value"/>
            is not a number then it is converted to a string, and matched against an internal list
            of strings considered true and false.
            </summary>
            <remarks>
            The string collections are immutable due to reasons of thread-safety surrounding
            static collections.
            </remarks>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.InvalidCastException">The value could not be converted.</exception>
            <returns>true or false, as appropriate.</returns>
        </member>
        <member name="M:BassUtils.Conv.IsIntegerTypeCode(System.TypeCode)">
            <summary>
            Checks to see if the <paramref name="typeCode"/> is an integer type.
            Char is not considered to be an integer type.
            </summary>
            <param name="typeCode">The TypeCode to check.</param>
            <returns>True if the typeCode is considered to be an integer type.</returns>
        </member>
        <member name="M:BassUtils.Conv.IsFloatingPointTypeCode(System.TypeCode)">
            <summary>
            Checks to see if the <paramref name="typeCode"/> is a floating point type.
            </summary>
            <param name="typeCode">The TypeCode to check.</param>
            <returns>True if the typeCode is considered to be an integer type.</returns>
        </member>
        <member name="M:BassUtils.Conv.IsNumericTypeCode(System.TypeCode)">
            <summary>
            Checks to see if the TypeCode corresponds to a numeric type (integer or floating point).
            Char is not considered to be numeric.
            </summary>
            <param name="typeCode">The TypeCode to check.</param>
            <returns>True if the typeCode is considered to be a numeric type.</returns>
        </member>
        <member name="M:BassUtils.Conv.IsIntegerType(System.Type)">
            <summary>
            Checks to see if the <paramref name="type"/> is integer.
            </summary>
            <param name="type">The Type to check.</param>
            <returns>True if the type is considered to be an integer type.</returns>
        </member>
        <member name="M:BassUtils.Conv.IsIntegerType(System.Object)">
            <summary>
            Checks to see if the value is of an integer type.
            </summary>
            <param name="value">The value to check.</param>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
            <returns>True if the value is considered to be an integer type.</returns>
        </member>
        <member name="M:BassUtils.Conv.IsFloatingPointType(System.Type)">
            <summary>
            Checks to see if the <paramref name="type"/> is floating point.
            </summary>
            <param name="type">The Type to check.</param>
            <returns>True if the type is considered to be a floating point type.</returns>
        </member>
        <member name="M:BassUtils.Conv.IsFloatingPointType(System.Object)">
            <summary>
            Checks to see if the value is of a floating point type.
            </summary>
            <param name="value">The value to check.</param>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
            <returns>True if the value is considered to be a floating point type.</returns>
        </member>
        <member name="M:BassUtils.Conv.IsNumericType(System.Type)">
            <summary>
            Checks to see if the Type is numeric (integer or floating point).
            </summary>
            <param name="type">The Type to check.</param>
            <returns>True if the type is considered to be a numeric type.</returns>
        </member>
        <member name="M:BassUtils.Conv.IsNumericType(System.Object)">
            <summary>
            Checks to see if the value is of a numeric type (integer or floating point).
            </summary>
            <param name="value">The value to check.</param>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
            <returns>True if the value is considered to be a numeric type.</returns>
        </member>
        <member name="M:BassUtils.Conv.IsNumeric(System.Object)">
            <summary>
            Checks to see if a value can be considered numeric. If the type is numeric then it
            automaticaly is. If the value is String or Char, an attempt is made to parse it
            as a double: if the attempt succeeds, true is returned.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True if the value is numeric.</returns>
        </member>
        <member name="M:BassUtils.Conv.IsHexValue(System.String)">
            <summary>
            Checks to see if a string value represents a hex string.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True if the string can be parsed as a hex number.</returns>
        </member>
        <member name="M:BassUtils.Conv.IsOctalValue(System.String)">
            <summary>
            Checks to see if a string value represents an octal number.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True if the string can be parsed as an octal number.</returns>
        </member>
        <member name="M:BassUtils.Conv.StringToBest(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts a string to the "best match" fundamental type.
            nulls are returned as null strings.
            True/true/False/false are returned as the corresponding boolean.
            Things that look like DateTimes are returned as such.
            Things that look like TimeSpans according to the format [d].hh:mm:ss[.fff] are returned as TimeSpans
            (days and fractions of a second are optional).
            If it looks like a Guid according to one of the format specifiers D, B, P or X then a Guid is returned.
            Hex literals (0x...) are returned as the corresponding int or long (always the signed type).
            Finally, things that look like doubles, decimals, longs or ints are returned as such. You can use the
            thousands separator too, e.g. "123,456.78".
            If none of the above match, the original string is returned.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="culture">Culture to use for parsing.</param>
            <returns>The appropriate converted value.</returns>
        </member>
        <member name="T:BassUtils.CSVOptions">
            <summary>
            Represents the different options that can be used by the AppendCSV methods of
            StringExtensions and StringBuilder extensions.
            </summary>
        </member>
        <member name="M:BassUtils.CSVOptions.#ctor">
            <summary>
            Initialises a new instance of the <code>CSVOptions</code> class.
            </summary>
        </member>
        <member name="P:BassUtils.CSVOptions.Separator">
            <summary>
            The character(s) to use as a separator between fields. Defaults to ",".
            </summary>
        </member>
        <member name="P:BassUtils.CSVOptions.Delimiter">
            <summary>
            The character(s) to use as a delimiter between fields. Defaults to " (double quote).
            If the delimiter appears in the terms being appended, it is replaced by doubling it.
            </summary>
        </member>
        <member name="P:BassUtils.CSVOptions.SkipNullValues">
            <summary>
            Whether to skip nulls. If true, when a field is null it will not be written, and
            neither will the Separator.
            </summary>
        </member>
        <member name="P:BassUtils.CSVOptions.SkipEmptyValues">
            <summary>
            Whether to skip empty strings. If true, when a field is empty it will not be written, and
            neither will the Separator.
            </summary>
        </member>
        <member name="P:BassUtils.CSVOptions.TrimStrings">
            <summary>
            Whether to trim strings before writing them. If true, the trimming is done before the
            check for <code>SkipNullValues</code>, so if both these values are true whitespace
            fields will be skipped.
            </summary>
        </member>
        <member name="P:BassUtils.CSVOptions.CrunchingOptions">
            <summary>
            Returns a CSVOptions object configured suitable for "crunching down" objects
            into human readable strings. It skips null or empty strings and does not use
            a delimiter. The end result is a compact, comma-separated list.
            </summary>
        </member>
        <member name="T:BassUtils.DataRowExtensions">
            <summary>
            Extensions to the <code>System.Data.DataRow</code> class.
            </summary>
        </member>
        <member name="M:BassUtils.DataRowExtensions.CopyRow(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            Copies the columns from <paramref name="sourceRow"/> to <paramref name="targetRow"/>,
            but only if the columns actually exist in <paramref name="targetRow"/>.
            This routine can be used to "hydrate" entities from generic results sets.
            </summary>
            <param name="sourceRow">The row to copy columns from.</param>
            <param name="targetRow">The row to copy columns to.</param>
        </member>
        <member name="T:BassUtils.DataSetExtensions">
            <summary>
            Extensions to the <code>System.Data.DataSet</code> class.
            </summary>
        </member>
        <member name="M:BassUtils.DataSetExtensions.SetReadOnly(System.Data.DataSet)">
            <summary>
            Sets all tables in the DataSet to be read only.
            </summary>
            <param name="dataSet">The DataSet.</param>
        </member>
        <member name="M:BassUtils.DataSetExtensions.SetReadOnly(System.Data.DataSet,System.Boolean)">
            <summary>
            Sets the ReadOnly flag on all tables in the DataSet to true or false.
            </summary>
            <param name="dataSet">The DataSet.</param>
            <param name="readOnly">The new value for the read-only flag.</param>
        </member>
        <member name="T:BassUtils.DataTableExtensions">
            <summary>
            Extensions to the <code>System.Data.DataTable</code> class.
            </summary>
        </member>
        <member name="M:BassUtils.DataTableExtensions.SetReadOnly(System.Data.DataTable)">
            <summary>
            Sets the ReadOnly flag on the DataTable to true.
            </summary>
            <param name="dataTable">The DataTable.</param>
        </member>
        <member name="M:BassUtils.DataTableExtensions.SetReadOnly(System.Data.DataTable,System.Boolean)">
            <summary>
            Sets the ReadOnly flag on the DataTable to true or false.
            </summary>
            <param name="dataTable">The DataTable.</param>
            <param name="readOnly">The new value for the read-only flag.</param>
        </member>
        <member name="M:BassUtils.DataTableExtensions.CopyRows(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Copies the rows from <paramref name="sourceTable"/> to <paramref name="destinationTable"/>,
            but only if the columns actually exist in <paramref name="destinationTable"/>.
            This routine can be used to "hydrate" entities from generic results sets.
            It used the CopyColumns routine.
            </summary>
            <param name="sourceTable">The table to copy rows from.</param>
            <param name="destinationTable">The table to copy rows to.</param>
        </member>
        <member name="M:BassUtils.DataTableExtensions.ColumnNames(System.Data.DataTable)">
            <summary>
            Return a list of all the column names in the table.
            </summary>
            <param name="dataTable">The data table that you want the column names from.</param>
            <returns>List of column names.</returns>
        </member>
        <member name="M:BassUtils.DataTableExtensions.HasChangedRows(System.Data.DataTable)">
            <summary>
            Determines whether the DataTable contains any changed rows.
            </summary>
            <param name="table">The table.</param>
            <returns>True if the table has at least one changed row, false otherwise.</returns>
        </member>
        <member name="T:BassUtils.DataViewExtensions">
            <summary>
            Extensions to the <code>System.Data.DataView</code> class.
            </summary>
        </member>
        <member name="M:BassUtils.DataViewExtensions.ColumnNames(System.Data.DataView)">
            <summary>
            Return a list of all the column names in the view. This is the same as the underlying table, I think.
            </summary>
            <param name="dataView">The data view that you want the column names from.</param>
            <returns>List of column names.</returns>
        </member>
        <member name="T:BassUtils.ExpandoExtensions">
            <summary>
            Extensions to the Expando (really, IDictionary&lt;string, object&gt;) class.
            </summary>
        </member>
        <member name="M:BassUtils.ExpandoExtensions.Merge(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Merges two dynamics by copying the properties of <paramref name="source"/> over
            to <paramref name="target"/>. In the event of name clashes, the properties in <paramref name="target"/>
            will be overwritten.
            </summary>
            <param name="target">The target of the merge.</param>
            <param name="source">The source of the merge.</param>
        </member>
        <member name="M:BassUtils.ExpandoExtensions.SetProperty(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            Adds a <paramref name="thing"/> to the <paramref name="target"/>, as a property
            called <paramref name="name"/>.
            </summary>
            <param name="target">The Expando (or dictionary) object to add to.</param>
            <param name="name">The name of the property.</param>
            <param name="thing">The object to add.</param>
        </member>
        <member name="T:BassUtils.FileUtils">
            <summary>
            Various file-system oriented utility functions.
            </summary>
        </member>
        <member name="M:BassUtils.FileUtils.EnsureDirectory(System.String)">
            <summary>
            Creates a directory if it does not exist (and returns true).
            If the directory already exists, returns false.
            </summary>
            <param name="directory">The directory to create.</param>
            <returns>True if the directory was created, false if it already existed.</returns>
        </member>
        <member name="M:BassUtils.FileUtils.EnsureParentDirectory(System.String)">
            <summary>
            Creates the parent directory of a file if it does not exist (and returns true).
            If the directory already exists, returns false.
            </summary>
            <param name="fileName">The filename whose parent directory is to be created.</param>
            <returns>True if the directory was created, false if it already existed.</returns>
        </member>
        <member name="M:BassUtils.FileUtils.GetCleanExtension(System.String)">
            <summary>
            Extracts a "clean" extension from a filename. By default, Path.GetExtension
            returns extensions with leading "." characters. This method removes them.
            </summary>
            <param name="fileName">Filename to get extension of.</param>
            <returns>Cleaned extension.</returns>
        </member>
        <member name="M:BassUtils.FileUtils.CleanExtension(System.String)">
            <summary>
            Cleans up an extension by trimming any leading '.', which the Path
            methods often leave on. e.g. ".cshtml" becomes "cshtml".
            </summary>
            <param name="extension">The extension to clean.</param>
            <returns>Cleaned extension.</returns>
        </member>
        <member name="M:BassUtils.FileUtils.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies a directory from one place to another.
            </summary>
            <param name="sourceDirectoryName">The directory to copy.</param>
            <param name="destinationDirectoryName">The destination.</param>
            <param name="overwrite">Whether to overwrite the destination.</param>
        </member>
        <member name="M:BassUtils.FileUtils.MoveDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Moves a directory from one place to another.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The destination.</param>
            <param name="overwrite">Whether to overwrite the destination.</param>
        </member>
        <member name="M:BassUtils.FileUtils.SetReadOnlyAttribute(System.String,System.Boolean,System.IO.SearchOption)">
            <summary>
            Sets or resets the readonly flag on the files in a directory and optionally
            its subdirectories.
            </summary>
            <param name="directory">The directory.</param>
            <param name="readOnly">True or false.</param>
            <param name="options">Whether to search just the top directory or all directories.</param>
        </member>
        <member name="M:BassUtils.FileUtils.SetFileAttributes(System.String,System.IO.FileAttributes,System.IO.SearchOption)">
            <summary>
            Sets attributes on all files in a directory and optionally its subdirectories.
            </summary>
            <param name="directory">The directory.</param>
            <param name="attributes">The attributes to set.</param>
            <param name="options">Whether to search just the top directory or all directories.</param>
        </member>
        <member name="M:BassUtils.FileUtils.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory. No exception is thrown if the directory does not exist.
            </summary>
            <param name="directory">The directory to delete.</param>
        </member>
        <member name="M:BassUtils.FileUtils.DeleteDirectoryContents(System.String)">
            <summary>
            Deletes all files and subdirectories in a directory, but leaves the directory.
            The directory does not need to exist (this is a no-op).
            </summary>
            <param name="directory">The directory to delete.</param>
        </member>
        <member name="M:BassUtils.FileUtils.GetExeDirectory">
            <summary>
            Returns the directory of the EXE (actually the entry assembly).
            </summary>
            <returns>The directory containing the EXE (entry assembly).</returns>
        </member>
        <member name="M:BassUtils.FileUtils.NormalizeToExeDirectory(System.String)">
            <summary>
            Normalizes a path to the directory of the EXE (actually the entry assembly).
            If the path is rooted then it is returned as is, otherwise a new path relative
            to the directory of the exe is returned. In both cases, you get a full
            absolute path.
            </summary>
            <remarks>
            Useful for easily creating paths relative to your EXE, for example
            <code>NormalizeToExeDirectory("Plugins")</code> gives you the Plugins
            folder under your EXE, but <code>NormalizeToExeDirectory("C:\temp")</code>
            gives you C:\temp.
            </remarks>
            <param name="path">The path to normalize.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="M:BassUtils.FileUtils.NormalizeToDirectory(System.String,System.String)">
            <summary>
            Normalizes a path to the specified directory.
            If the path is rooted then it is returned as is, otherwise a new path relative
            to the <paramref name="directory"/> is returned. In both cases, you get a full
            absolute path.
            </summary>
            <remarks>
            </remarks>
            <param name="path">The path to normalize.</param>
            <param name="directory">The directory to normalize relative to.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="T:BassUtils.ICollectionExtensions">
            <summary>
            Extensions to the <code>ICollection</code> interface.
            </summary>
        </member>
        <member name="M:BassUtils.ICollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a collection of items to an existing collection.
            </summary>
            <typeparam name="T">The type of thing in the collection.</typeparam>
            <param name="sequence">The sequence to add the items to.</param>
            <param name="itemsToAdd">The collection of items to add.</param>
        </member>
        <member name="T:BassUtils.IDataParameterExtensions">
            <summary>
            Extension methods to IDataParamter to make setting nullable parameters easier.
            </summary>
        </member>
        <member name="M:BassUtils.IDataParameterExtensions.SetValue(System.Data.IDataParameter,System.String)">
            <summary>
            Sets the <code>.Value</code> property of <paramref name="parameter"/>.
            If the string is null, or Trim()s to empty string then the <code>.Value</code>
            is set to DBNull.Value, otherwise it is set to the value of the text
            field, with any *'s replaced with %'s.
            </summary>
            <param name="parameter">The parameter to have its value set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:BassUtils.IDataParameterExtensions.SetValue``1(System.Data.IDataParameter,System.Nullable{``0})">
            <summary>
            Sets the <code>.Value</code> property of <paramref name="parameter"/>.
            If the value is null, then the <code>.Value</code>
            is set to DBNull.Value, otherwise it is set to <paramref name="value"/>.
            </summary>
            <param name="parameter">The parameter to have its value set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:BassUtils.IDataReaderExtensions">
            <summary>
            Extensions to the <code>System.Data.IDataReader</code> interface.
            </summary>
        </member>
        <member name="M:BassUtils.IDataReaderExtensions.ToDataTable(System.Data.IDataReader)">
            <summary>
            Converts an IDataReader to a DataTable.
            </summary>
            <param name="reader">The reader.</param>
            <returns>A DataTable object.</returns>
        </member>
        <member name="M:BassUtils.IDataReaderExtensions.ToDataSet(System.Data.IDataReader)">
            <summary>
            Converts an IDataReader to a DataSet. Each set of records is returned as an
            individual table in the DataSet.
            </summary>
            <param name="reader">The reader.</param>
            <returns>A DataSet object with 1 or more tables.</returns>
        </member>
        <member name="M:BassUtils.IDataReaderExtensions.HydrateAll``1(System.Data.IDataReader)">
            <summary>
            Create an object of the specified type for every row in the DataReader.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="reader">The data reader to iterate.</param>
            <returns>An enumerable of objects of the specified type.</returns>
        </member>
        <member name="M:BassUtils.IDataReaderExtensions.HydrateAll``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Create an object of the specified type for every row in the DataReader.
            A delegate is asked to do the actual object construction.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="reader">The data reader to iterate.</param>
            <param name="hydrationFunction">A delegate that can construct objects of type T.</param>
            <returns>An enumerable of objects of the specified type.</returns>
        </member>
        <member name="M:BassUtils.IDataReaderExtensions.CurrentRecords(System.Data.IDataReader)">
            <summary>
            Iterate over all the rows in the current result set.
            </summary>
            <param name="reader">The data reader to iterate.</param>
            <returns>An enumerable of all the rows in the reader's current resultset.</returns>
        </member>
        <member name="M:BassUtils.IDataReaderExtensions.CopyRows(System.Data.IDataReader,System.Data.DataTable)">
            <summary>
            Copies the rows from <paramref name="sourceReader"/> to <paramref name="destinationTable"/>,
            but only if the columns actually exist in <paramref name="destinationTable"/>.
            This routine can be used to "hydrate" entities from generic results sets.
            </summary>
            <param name="sourceReader">The data reader to copy rows from.</param>
            <param name="destinationTable">The table to copy rows to.</param>
        </member>
        <member name="M:BassUtils.IDataReaderExtensions.CopyRow(System.Data.IDataReader,System.Data.DataRow)">
            <summary>
            Copies 1 row from <paramref name="sourceReader"/> to <paramref name="destinationRow"/>,
            but only if the columns actually exist in <paramref name="destinationRow"/>.
            This routine can be used to "hydrate" entities from generic results sets.
            </summary>
            <param name="sourceReader">The row to copy columns from.</param>
            <param name="destinationRow">The row to copy columns to.</param>
        </member>
        <member name="M:BassUtils.IDataReaderExtensions.GetColumns(System.Data.IDataReader)">
            <summary>
            Gets the columns in the reader.	
            </summary>
            <param name="reader">The reader.</param>
            <returns>An enumerable of column names.</returns>
        </member>
        <member name="M:BassUtils.IDataReaderExtensions.CopyData(System.Collections.Generic.IEnumerable{System.String},System.Data.IDataReader,System.Data.DataRow)">
            <summary>
            Copies the data in the specified columns to the target.
            </summary>
            <param name="readerColumns">The reader columns.</param>
            <param name="sourceReader">The source reader.</param>
            <param name="destinationRow">The target row.</param>
        </member>
        <member name="T:BassUtils.IDataRecordExtensions">
            <summary>
            Extensions to the <code>System.Data.IDataRecord</code> class.
            </summary>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.Hydrate``1(System.Data.IDataRecord)">
            <summary>
            Attempt to create an object of type T and initialise it using an IDataRecord.
            The method looks for an instance constructor that takes an IDataRecord. If none
            is found it looks for a static method on the class that takes an IDataRecord and
            returns an object of type T, and assumes that this is a factory method.
            If this lookup fails, an exception is thrown.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="record">The data record.</param>
            <returns>A new object of type T.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.Hydrate``1(System.Data.IDataRecord,System.Func{System.Data.IDataRecord,``0})">
            <summary>
            Create a new object of type T using the specified delegate.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="record">The data record.</param>
            <param name="hydrationFunction">A delegate that can construct a new object of type T
            and initialise it from a data record.</param>
            <returns>A new object of type T.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.IsDbNull(System.Data.IDataRecord,System.String)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>True if the field is DbNull, false otherwise.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetBoolean(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetBoolean(System.Data.IDataRecord,System.Int32,System.Boolean)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetBoolean(System.Data.IDataRecord,System.String,System.Boolean)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableBoolean(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableBoolean(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetByte(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetByte(System.Data.IDataRecord,System.Int32,System.Byte)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetByte(System.Data.IDataRecord,System.String,System.Byte)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableByte(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableByte(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetChar(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetChar(System.Data.IDataRecord,System.Int32,System.Char)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetChar(System.Data.IDataRecord,System.String,System.Char)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Char"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableChar(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableChar(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetDateTime(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetDateTime(System.Data.IDataRecord,System.Int32,System.DateTime)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetDateTime(System.Data.IDataRecord,System.String,System.DateTime)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableDateTime(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableDateTime(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetDecimal(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetDecimal(System.Data.IDataRecord,System.Int32,System.Decimal)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetDecimal(System.Data.IDataRecord,System.String,System.Decimal)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableDecimal(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableDecimal(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetDouble(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetDouble(System.Data.IDataRecord,System.Int32,System.Double)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetDouble(System.Data.IDataRecord,System.String,System.Double)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Double"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableDouble(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableDouble(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetSingle(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetSingle(System.Data.IDataRecord,System.Int32,System.Single)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetSingle(System.Data.IDataRecord,System.String,System.Single)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Single"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableFloat(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableFloat(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetInt16(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as an <see cref="T:System.Int16"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetInt16(System.Data.IDataRecord,System.Int32,System.Int16)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetInt16(System.Data.IDataRecord,System.String,System.Int16)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int16"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableInt16(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableInt16(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetInt32(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetInt32(System.Data.IDataRecord,System.Int32,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetInt32(System.Data.IDataRecord,System.String,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int32"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableInt32(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableInt32(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetInt64(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as an <see cref="T:System.Int64"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetInt64(System.Data.IDataRecord,System.Int32,System.Int64)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetInt64(System.Data.IDataRecord,System.String,System.Int64)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableInt64(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableInt64(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetString(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetString(System.Data.IDataRecord,System.Int32,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetString(System.Data.IDataRecord,System.String,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetStringOrNull(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/>, or null (Nothing in Visual Basic).
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetStringOrNull(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.String"/>, or null (Nothing in Visual Basic).
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetValue(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetValue(System.Data.IDataRecord,System.Int32,System.Object)">
            <summary>
            Gets the value of the specified column.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetValue(System.Data.IDataRecord,System.String,System.Object)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetValueOrNull(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as an <see cref="T:System.Object"/>, or null (Nothing in Visual Basic).
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetValueOrNull(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as an <see cref="T:System.Object"/>, or null (Nothing in Visual Basic).
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetGuid(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as an <see cref="T:System.Guid"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetGuid(System.Data.IDataRecord,System.Int32,System.Guid)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetGuid(System.Data.IDataRecord,System.String,System.Guid)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Guid"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableGuid(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableGuid(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/>.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetBooleanExtended(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/>.
            Accepts Y, N, T, F, Yes, No, True, False, 0, 1.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetBooleanExtended(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/>.
            Accepts Y, N, T, F, Yes, No, True, False, 0, 1.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetBooleanExtended(System.Data.IDataRecord,System.Int32,System.Boolean)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/>.
            Accepts Y, N, T, F, Yes, No, True, False, 0, 1.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetBooleanExtended(System.Data.IDataRecord,System.String,System.Boolean)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Boolean"/>.
            Accepts Y, N, T, F, Yes, No, True, False, 0, 1.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <param name="defaultIfNull">The value to return if the value of the column is null.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableBooleanExtended(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            Accepts Y, N, T, F, Yes, No, True, False, 0, 1.
            </summary>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableBooleanExtended(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            Accepts Y, N, T, F, Yes, No, True, False, 0, 1.
            </summary>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetEnum``1(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column an an enum.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column converted to the corresponding enum value.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetEnum``1(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column an an enum.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column converted to the corresponding enum value.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetEnum``1(System.Data.IDataRecord,System.Int32,``0)">
            <summary>
            Gets the value of the specified column an an enum, returning a default value if the column is null.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <param name="defaultIfNull">Default value to return if the column is null.</param>
            <returns>The value of the column converted to the corresponding enum value, or the default value if the column is null.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetEnum``1(System.Data.IDataRecord,System.String,``0)">
            <summary>
            Gets the value of the specified column an an enum, returning a default value if the column is null.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <param name="defaultIfNull">Default value to return if the column is null.</param>
            <returns>The value of the column converted to the corresponding enum value, or the default value if the column is null.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableEnum``1(System.Data.IDataRecord,System.Int32)">
            <summary>
            Gets the value of the specified column an an enum, returning null if the column is DbNull.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="record">The data record.</param>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column converted to the corresponding enum value, or null.</returns>
        </member>
        <member name="M:BassUtils.IDataRecordExtensions.GetNullableEnum``1(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column an an enum, returning null if the column is DbNull.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="record">The data record.</param>
            <param name="name">The name of the column.</param>
            <returns>The value of the column converted to the corresponding enum value, or null.</returns>
        </member>
        <member name="T:BassUtils.IDbConnectionExtensions">
            <summary>
            Extensions to the <code>System.Data.IDbConnection</code> interface.
            </summary>
        </member>
        <member name="M:BassUtils.IDbConnectionExtensions.GetSchemaTable(System.Data.IDbConnection,System.String)">
            <summary>
            Gets the schema of a table (or view) using the <c>IDataReader.GetSchemaTable()</c>
            method. This is good for basic information, but will not be full-fidelity compared
            to what is available from SQL server.
            </summary>
            <param name="connection">The connection.</param>
            <param name="tableName">The name of the table.</param>
            <returns>DataTable containing the schema for the SQL table.</returns>
        </member>
        <member name="T:BassUtils.NullConversion">
            <summary>
            Specifies how to treat System.Nullable types when returning them from the ObjectDataReader.
            </summary>
        </member>
        <member name="F:BassUtils.NullConversion.None">
            <summary>
            Return System.Nullable of T as System.Nullable of T.
            Null values are returned as "null".
            n.b. Such data readers cannot be loaded into DataTable objects.
            </summary>
        </member>
        <member name="F:BassUtils.NullConversion.ToDBNull">
            <summary>
            Return System.Nullable of T as T. (e.g. int? => int).
            Null values are returned as DBNull.Value.
            This makes the reader safe for loading into a DataTable object.
            </summary>
        </member>
        <member name="T:BassUtils.NullDataReader">
            <summary>
            The NullDataReader implements the IDataReader interface, but will never return any rows:
            The Read() method will always return false. IsClosed always returns True. Many other methods
            will throw exceptions if you call them.
            </summary>
        </member>
        <member name="M:BassUtils.NullDataReader.Close">
            <summary>
            Closes the data reader (a no-op).
            </summary>
        </member>
        <member name="M:BassUtils.NullDataReader.GetSchemaTable">
            <summary>
            Throws NotImplementedException.
            </summary>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.NextResult">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="M:BassUtils.NullDataReader.Read">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="M:BassUtils.NullDataReader.Dispose">
            <summary>
            Disposes the data reader.
            </summary>
        </member>
        <member name="M:BassUtils.NullDataReader.GetBoolean(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetByte(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index within the row from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetChar(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldoffset">The index within the row from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetData(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetDateTime(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetDecimal(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetDouble(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetFieldType(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetFloat(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetGuid(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetInt16(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetInt32(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetInt64(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetName(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetOrdinal(System.String)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetString(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetValue(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.GetValues(System.Object[])">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="values">An array of System.Object to copy the attribute fields into.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.NullDataReader.IsDBNull(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="P:BassUtils.NullDataReader.Depth">
            <summary>
            Always returns 0.
            </summary>
        </member>
        <member name="P:BassUtils.NullDataReader.IsClosed">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="P:BassUtils.NullDataReader.RecordsAffected">
            <summary>
            Always returns 0.
            </summary>
        </member>
        <member name="P:BassUtils.NullDataReader.FieldCount">
            <summary>
            Always returns 0.
            </summary>
        </member>
        <member name="P:BassUtils.NullDataReader.Item(System.String)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="P:BassUtils.NullDataReader.Item(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="T:BassUtils.ObjectDataReader`1">
            <summary>
            The ObjectDataReader presents a collection of CLR objects via an IDataReader interface.
            Scalar properties, fields and enumerations are projected. They can be of System.Nullable,
            or value types.
            
            This is useful for doing high-speed data loads with SqlBulkCopy, and copying collections
            of entities to a DataTable for use with SQL Server Table-Valued parameters, or for interop
            with older ADO.NET applications.
            
            For explicit control over the fields projected by the IDataReader, just wrap your collection
            of entities in an anonymous type projection before wrapping it in an ObjectDataReader.
            i.e. use a LINQ query. This is also the way to flatten object graphs.
            </summary>
            <typeparam name="T">The type of things we are creating a reader over</typeparam>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initialise a new ObjectDataReader that treats nullable types as nulls.
            </summary>
            <param name="collection">The collection of things to make a data reader over.</param>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.#ctor(System.Collections.Generic.IEnumerable{`0},BassUtils.NullConversion)">
            <summary>
            Initialise a new ObjectDataReader.
            </summary>
            <param name="collection">The collection of things to make a data reader over.</param>
            <param name="nullConversion">How to treat System.Nullable types.</param>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetSchemaTable">
            <summary>
            Returns a System.Data.DataTable that describes the column metadata of the
            System.Data.IDataReader.
            </summary>
            <returns>A System.Data.DataTable that describes the column metadata.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.Close">
            <summary>
            Closes the data reader.
            </summary>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.NextResult">
            <summary>
            Always returns false, the ObjectDataReader only supports one recordset at a time.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.Read">
            <summary>
            Advances the data reader to the next record.
            </summary>
            <returns>True if there are more rows; false otherwise.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.Dispose">
            <summary>
            Disposes the data reader.
            </summary>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetBoolean(System.Int32)">
            <summary>
            Gets the boolean at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Boolean value.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetByte(System.Int32)">
            <summary>
            Gets the Byte at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Byte value.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer
            as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index within the row from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetChar(System.Int32)">
            <summary>
            Gets the char at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Char value.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer
            as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldoffset">The index within the row from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of characters read.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetData(System.Int32)">
            <summary>
            Throws NotImplementedException.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Never, always throws.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type information for the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The data type information for the specified field.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetDateTime(System.Int32)">
            <summary>
            Gets the DateTime at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>DateTime value.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetDecimal(System.Int32)">
            <summary>
            Gets the Decimal at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Decimal value.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetDouble(System.Int32)">
            <summary>
            Gets the double at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Double value.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetFieldType(System.Int32)">
            <summary>
            Gets the System.Type information corresponding to the type of System.Object
            that would be returned from System.Data.IDataRecord.GetValue(System.Int32).
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The System.Type information corresponding to the type of System.Object that
            would be returned from System.Data.IDataRecord.GetValue(System.Int32).
            </returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetFloat(System.Int32)">
            <summary>
            Gets the float at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Float value.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetGuid(System.Int32)">
            <summary>
            Gets the Guid at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Guid value.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetInt16(System.Int32)">
            <summary>
            Gets the Int16 (short) at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Int16 (short) value.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetInt32(System.Int32)">
            <summary>
            Gets the Int32 at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Int32 value.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetInt64(System.Int32)">
            <summary>
            Gets the Int64 at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Int64 value.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetName(System.Int32)">
            <summary>
            Gets the name of the column at ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Name of the field.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal for the column with the specified name.
            </summary>
            <param name="name">Name of the column.</param>
            <returns>Corresponding column ordinal.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetString(System.Int32)">
            <summary>
            Gets the string at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>String value.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Value from column i.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.GetValues(System.Object[])">
            <summary>
            Populates an array of objects with the column values of the current record.
            </summary>
            <param name="values">An array of System.Object to copy the attribute fields into.</param>
            <returns>The number of instances of System.Object in the array.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is null.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>True if the field is DbNull, false otherwise.</returns>
        </member>
        <member name="P:BassUtils.ObjectDataReader`1.Depth">
            <summary>
            Always returns 1.
            </summary>
        </member>
        <member name="P:BassUtils.ObjectDataReader`1.IsClosed">
            <summary>
            Returns true if the reader is closed.
            </summary>
        </member>
        <member name="P:BassUtils.ObjectDataReader`1.RecordsAffected">
            <summary>
            Always returns -1.
            </summary>
        </member>
        <member name="P:BassUtils.ObjectDataReader`1.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
            <returns>Number of columns.</returns>
        </member>
        <member name="P:BassUtils.ObjectDataReader`1.Item(System.String)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="name">Name of the field.</param>
            <returns>Value from the column.</returns>
        </member>
        <member name="P:BassUtils.ObjectDataReader`1.Item(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Value from column i.</returns>
        </member>
        <member name="M:BassUtils.ObjectDataReader`1.Attribute.MakePropertyAccessor``2(System.Reflection.PropertyInfo)">
            <summary>
            Uses Lamda expressions to create a Func&lt;T,object&gt; that invokes the given property getter.
            The property value will be extracted and cast to type TProperty
            </summary>
            <typeparam name="TObject">The type of the object declaring the property.</typeparam>
            <typeparam name="TProperty">The type to cast the property value to</typeparam>
            <param name="pi">PropertyInfo pointing to the property to wrap</param>
            <returns></returns>
        </member>
        <member name="T:BassUtils.PaddingAlignment">
            <summary>
            How to align the input string when padding.
            </summary>
            <remarks>
            I hate enums, can never remember:
            a.ToString() gives "Left"
            Enum.Parse(typeof(Alignment), "Right") gives Alignment.Right
            
            (char)a gives '&lt;'
            var b = (Alignment)'&gt;' // b is "Right"
            </remarks>
        </member>
        <member name="F:BassUtils.PaddingAlignment.None">
            <summary>
            No alignment.
            </summary>
        </member>
        <member name="F:BassUtils.PaddingAlignment.Left">
            <summary>
            Align the input string to the left: "ab" -> "ab  ".
            </summary>
        </member>
        <member name="F:BassUtils.PaddingAlignment.Right">
            <summary>
            Align the input string to the right: "ab" -> "  ab".
            </summary>
        </member>
        <member name="F:BassUtils.PaddingAlignment.Center">
            <summary>
            Align the input string to the center: "ab" -> " ab ".
            </summary>
        </member>
        <member name="T:BassUtils.ArgumentValidators">
            <summary>
            Provides utility methods for validating arguments to methods.
            </summary>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfNull``1(``0,System.String)">
            <summary>
            Throws an <code>ArgumentNullException</code> if <paramref name="parameter"/> is null.
            </summary>
            <typeparam name="T">Generic type of the argument.</typeparam>
            <param name="parameter">The parameter itself.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns><paramref name="parameter"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfNull``1(``0,System.String,System.String)">
            <summary>
            Throws an <code>ArgumentNullException</code> if <paramref name="parameter"/> is null.
            </summary>
            <typeparam name="T">Generic type of the argument.</typeparam>
            <param name="parameter">The parameter itself.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="message">Message to associate with the exception.</param>
            <returns><paramref name="parameter"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <code>ArgumentNullException</code> if <paramref name="parameter"/> is null.
            Throws an <code>ArgumentException</code> if <paramref name="parameter"/> is the empty string.
            </summary>
            <param name="parameter">The parameter itself.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns><paramref name="parameter"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Throws an <code>ArgumentNullException</code> if <paramref name="parameter"/> is null.
            Throws an <code>ArgumentException</code> if <paramref name="parameter"/> is the empty string.
            </summary>
            <param name="parameter">The parameter itself.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="message">Message to associate with the exception.</param>
            <returns><paramref name="parameter"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws an <code>ArgumentNullException</code> if <paramref name="parameter"/> is null.
            Throws an <code>ArgumentException</code> if <paramref name="parameter"/> is the empty string or whitespace.
            </summary>
            <param name="parameter">The parameter itself.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns><paramref name="parameter"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfNullOrWhiteSpace(System.String,System.String,System.String)">
            <summary>
            Throws an <code>ArgumentNullException</code> if <paramref name="parameter"/> is null.
            Throws an <code>ArgumentException</code> if <paramref name="parameter"/> is the empty string or whitespace.
            </summary>
            <param name="parameter">The parameter itself.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="message">Message to associate with the exception.</param>
            <returns><paramref name="parameter"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfLessThan``1(``0,``0,System.String)">
            <summary>
            Throws an <code>ArgumentOutOfRangeException</code> if <paramref name="parameter"/> is less than <paramref name="comparisonValue"/>.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="parameter">The parameter itself.</param>
            <param name="comparisonValue">The value to compare against.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns><paramref name="parameter"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfLessThan``1(``0,``0,System.String,System.String)">
            <summary>
            Throws an <code>ArgumentOutOfRangeException</code> if <paramref name="parameter"/> is less than <paramref name="comparisonValue"/>.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="parameter">The parameter itself.</param>
            <param name="comparisonValue">The value to compare against.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="message">Message to associate with the exception.</param>
            <returns><paramref name="parameter"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <code>ArgumentOutOfRangeException</code> if <paramref name="parameter"/> is less than 
            or equal to <paramref name="comparisonValue"/>.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="parameter">The parameter itself.</param>
            <param name="comparisonValue">The value to compare against.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns><paramref name="parameter"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfLessThanOrEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Throws an <code>ArgumentOutOfRangeException</code> if <paramref name="parameter"/> is less than
            or equal to <paramref name="comparisonValue"/>.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="parameter">The parameter itself.</param>
            <param name="comparisonValue">The value to compare against.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="message">Message to associate with the exception.</param>
            <returns><paramref name="parameter"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfMoreThan``1(``0,``0,System.String)">
            <summary>
            Throws an <code>ArgumentOutOfRangeException</code> if <paramref name="parameter"/> is more than
            <paramref name="comparisonValue"/>.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="parameter">The parameter itself.</param>
            <param name="comparisonValue">The value to compare against.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns><paramref name="parameter"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfMoreThan``1(``0,``0,System.String,System.String)">
            <summary>
            Throws an <code>ArgumentOutOfRangeException</code> if <paramref name="parameter"/> is more than
            <paramref name="comparisonValue"/>.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="parameter">The parameter itself.</param>
            <param name="comparisonValue">The value to compare against.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="message">Message to associate with the exception.</param>
            <returns><paramref name="parameter"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfMoreThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Throws an <code>ArgumentOutOfRangeException</code> if <paramref name="parameter"/> is more than
            or equal to <paramref name="comparisonValue"/>.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="parameter">The parameter itself.</param>
            <param name="comparisonValue">The value to compare against.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns><paramref name="parameter"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfMoreThanOrEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Throws an <code>ArgumentOutOfRangeException</code> if <paramref name="parameter"/> is more than
            or equal to <paramref name="comparisonValue"/>.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="parameter">The parameter itself.</param>
            <param name="comparisonValue">The value to compare against.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="message">Message to associate with the exception.</param>
            <returns><paramref name="parameter"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfFileDoesNotExist(System.String,System.String)">
            <summary>
            Throws an <code>ArgumentNullException</code> if <paramref name="path"/> is null.
            Throws an <code>ArgumentException</code> if <paramref name="path"/> is whitespace.
            Throws a <code>FileNotFoundException</code> if the file <paramref name="path"/> does not exist.
            </summary>
            <param name="path">Path of the directory.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns><paramref name="path"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfDirectoryDoesNotExist(System.String,System.String)">
            <summary>
            Throws an <code>ArgumentNullException</code> if <paramref name="path"/> is null.
            Throws an <code>ArgumentException</code> if <paramref name="path"/> is whitespace.
            Throws a <code>DirectoryNotFoundException</code> if the directory <paramref name="path"/> does not exist.
            </summary>
            <param name="path">Path of the directory.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns><paramref name="path"/> if no exception is thrown.</returns>
        </member>
        <member name="M:BassUtils.ArgumentValidators.ThrowIfInvalidEnumerand``1(``0,System.String)">
            <summary>
            Throws an <code>ArgumentException</code> if <typeparamref name="T"/> is not an enumerated type.
            Throws an <code>ArgumentOutOfRangeException</code> if <paramref name="enumerand"/> is not a valid value within <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="enumerand">The value of the enumeration.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns><paramref name="enumerand"/> if no exception is thrown.</returns>
        </member>
        <member name="T:BassUtils.AssemblyExtensions">
            <summary>
            Extensions to the <code>System.Reflection.Assembly</code> class.
            </summary>
        </member>
        <member name="M:BassUtils.AssemblyExtensions.GetResourceFileName(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the full manifest filename of a manifest resource. The <paramref name="fileName" />
            is of the format "folder.folder.filename.ext" and is case sensitive.
            </summary>
            <param name="assembly">The assembly in which to form the filename.</param>
            <param name="fileName">Filename you want to refer to.</param>
            <returns>Fully qualified manifest resource filename.</returns>
        </member>
        <member name="M:BassUtils.AssemblyExtensions.GetResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            Gets an open stream on the specified embedded resource. It is the
            caller's responsibility to call Dispose() on the stream.
            The filename is of the format "folder.folder.filename.ext"
            and is case sensitive.
            </summary>
            <param name="assembly">The assembly from which to retrieve the Stream.</param>
            <param name="fileName">Filename whose contents you want.</param>
            <returns>Stream object.</returns>
        </member>
        <member name="M:BassUtils.AssemblyExtensions.GetResourceAsString(System.Reflection.Assembly,System.String)">
            <summary>
            Get the contents of an embedded file as a string.
            The filename is of the format "folder.folder.filename.ext"
            and is case sensitive.
            </summary>
            <param name="assembly">The assembly from which to retrieve the file.</param>
            <param name="fileName">Filename whose contents you want.</param>
            <returns>String object.</returns>
        </member>
        <member name="M:BassUtils.AssemblyExtensions.GetResourceAsImage(System.Reflection.Assembly,System.String)">
            <summary>
            Get the contents of an embedded file as an Image.
            The filename is of the format "folder.folder.filename.ext"
            and is case sensitive.
            </summary>
            <param name="assembly">The assembly from which to retrieve the image.</param>
            <param name="fileName">Filename whose contents you want.</param>
            <returns>Image object.</returns>
        </member>
        <member name="M:BassUtils.AssemblyExtensions.GetResourceAsBytes(System.Reflection.Assembly,System.String)">
            <summary>
            Get the contents of an embedded file as an array of bytes.
            The filename is of the format "folder.folder.filename.ext"
            and is case sensitive.
            </summary>
            <param name="assembly">The assembly from which to retrieve the image.</param>
            <param name="fileName">Filename whose contents you want.</param>
            <returns>The manifest resource as an array of bytes.</returns>
        </member>
        <member name="T:BassUtils.Comb">
            <summary>
            Static class for creating new GUIDs that are monotonically increasing when ordered by SQL Server.
            </summary>
        </member>
        <member name="M:BassUtils.Comb.NewGuid">
            <summary>
            Returns a new Guid using the COMB algorithm.
            </summary>
            <returns>A new COMB Guid.</returns>
        </member>
        <member name="T:BassUtils.DirectoryWatcher">
            <summary>
            Wrapper around <code>FileSystemWatcher</code> that tries to uniqueify events,
            because <code>FileSystemWatcher</code> raises lots of duplicates.
            </summary>
        </member>
        <member name="M:BassUtils.DirectoryWatcher.#ctor(System.String)">
            <summary>
            Create a new <code>DirectoryWatcher</code> on <paramref name="directory"/>
            using the default timeout. Does not ignore any files or directories.
            </summary>
            <param name="directory">The directory to watch.</param>
        </member>
        <member name="M:BassUtils.DirectoryWatcher.#ctor(System.String,System.Int32)">
            <summary>
            Create a new <code>DirectoryWatcher</code> on <paramref name="directory"/>
            using the timeout of <paramref name="timerPeriodMilliseconds"/>. Does not ignore any files or directories.
            </summary>
            <param name="directory">The directory to watch.</param>
            <param name="timerPeriodMilliseconds">The timeout. Must be a postive number.</param>
        </member>
        <member name="M:BassUtils.DirectoryWatcher.#ctor(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new <code>DirectoryWatcher</code> on <paramref name="directory"/>
            using the timeout of <paramref name="timerPeriodMilliseconds"/>. Optionally
            ignore specified files or directories.
            </summary>
            <param name="directory">The directory to watch.</param>
            <param name="timerPeriodMilliseconds">The timeout. Must be a postive number.</param>
            <param name="filesToIgnore">List of files to ignore. Can be null or empty.</param>
            <param name="directoriesToIgnore">List of directories to ignore. Can be null or empty.</param>
        </member>
        <member name="M:BassUtils.DirectoryWatcher.Start">
            <summary>
            Starts the watcher.
            </summary>
        </member>
        <member name="M:BassUtils.DirectoryWatcher.Stop">
            <summary>
            Stops the watcher.
            </summary>
        </member>
        <member name="M:BassUtils.DirectoryWatcher.Dispose">
            <summary>
            Disposes the watcher.
            </summary>
        </member>
        <member name="P:BassUtils.DirectoryWatcher.Directory">
            <summary>
            The directory being watched.
            </summary>
        </member>
        <member name="P:BassUtils.DirectoryWatcher.TimerPeriodMilliseconds">
            <summary>
            The period in milliseconds at which the <code>DirectoryWatcher</code>
            raises the <code>ChangedFiles</code> event.
            </summary>
        </member>
        <member name="E:BassUtils.DirectoryWatcher.ChangedFiles">
            <summary>
            The <code>ChangedFiles event is raised periodically whenever there</code>
            are file system events.
            </summary>
        </member>
        <member name="P:BassUtils.DirectoryWatcher.FilesToIgnore">
            <summary>
            The list of files to ignore that the <code>DirectoryWatcher</code>
            was configured with. Can be null.
            </summary>
        </member>
        <member name="P:BassUtils.DirectoryWatcher.DirectoriesToIgnore">
            <summary>
            The list of directories to ignore that the <code>DirectoryWatcher</code>
            was configured with. Can be null.
            </summary>
        </member>
        <member name="P:BassUtils.DirectoryWatcher.DefaultTimerPeriodMilliseconds">
            <summary>
            Returns the default number of milliseconds between event raisings, if there are
            notifications to be returned.
            </summary>
        </member>
        <member name="T:BassUtils.DirectoryWatcherEventArgs">
            <summary>
            The EventArgs type used by the <code>DirectoryWatcher</code> class.
            </summary>
        </member>
        <member name="M:BassUtils.DirectoryWatcherEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.IO.FileSystemEventArgs})">
            <summary>
            Construct a new DirectoryWatcherEventArgs object.
            </summary>
            <param name="fileSystemEvents">List of file system event args. Cannot be null.</param>
        </member>
        <member name="P:BassUtils.DirectoryWatcherEventArgs.FileSystemEvents">
            <summary>
            The list of file system events raised by the <code>DirectoryWatcher</code>.
            </summary>
        </member>
        <member name="T:BassUtils.DoubleExtensions">
            <summary>
            Extensions to the <code>Double</code> class, mainly for comparing doubles.
            </summary>
        </member>
        <member name="F:BassUtils.DoubleExtensions.DefaultMaxRelativeError">
            <summary>
            Max error to be used when comparing doubles.
            </summary>
        </member>
        <member name="M:BassUtils.DoubleExtensions.AlmostEqualAbsolute(System.Double,System.Double)">
            <summary>
            Check to see whether 2 double are equal, using an absolute error factor.
            Use this method if you think "equality" means within 0.00001 (or some
            other maxAbsoluteError). This method is not recommended because it takes no acount
            of the sizes of the numbers. For example, for 2 very large numbers they may
            well differ by much more than maxAbsoluteError, yet be the same to within
            99.99999%. For this reason, you should strongly consider using AlmostEqualRelative
            instead. This overload of AlmostEqualAbsolute calls the other overload
            passing a maxAbsoluteError of double.Epsilon.
            </summary>
            <param name="first">First double.</param>
            <param name="second">Second double.</param>
            <returns>True if first and second are equal, false otherwise.</returns>
        </member>
        <member name="M:BassUtils.DoubleExtensions.AlmostEqualAbsolute(System.Double,System.Double,System.Double)">
            <summary>
            Check to see whether 2 double are equal, using an absolute error factor.
            Use this method if you think "equality" means within 0.00001 (or some
            other maxAbsoluteError). This method is not recommended because it takes no acount
            of the sizes of the numbers. For example, for 2 very large numbers they may
            well differ by much more than absoluteError, yet be the same to within
            99.99999%. For this reason, you should strongly consider using AlmostEqualRelative
            instead.
            </summary>
            <param name="first">First double.</param>
            <param name="second">Second double.</param>
            <param name="maxAbsoluteError">Maximum absolute difference between first and second
            for the two numbers to still be equal.</param>
            <returns>True if first and second are equal, false otherwise.</returns>
        </member>
        <member name="M:BassUtils.DoubleExtensions.AlmostEqualRelative(System.Double,System.Double)">
            <summary>
            Check to see whether 2 doubles are equal, using a relative error factor.
            This function is preferred over AlmostEqualAbsolute because it takes into
            account differences in number size. The maxRelativeError parameter specifies
            the error tolerance for the match. This overload calls the other
            overload passing in a maxRelativeError of Reals.DefaultMaxRelativeError
            See the documentation for the Reals.RelativeError function
            for examples of relative errors for various combinations of first and second.
            </summary>
            <param name="first">First double.</param>
            <param name="second">Second double.</param>
            <returns>True if first and second are equal, false otherwise.</returns>
        </member>
        <member name="M:BassUtils.DoubleExtensions.AlmostEqualRelative(System.Double,System.Double,System.Double)">
            <summary>
            Check to see whether 2 doubles are equal, using a relative error factor.
            This function is preferred over AlmostEqualAbsolute because it takes into
            account differences in number size. The maxRelativeError parameter specifies
            the error tolerance for the match. See the documentation for the
            Reals.RelativeError function for examples of relative errors for various
            combinations of first and second.
            </summary>
            <param name="first">First double.</param>
            <param name="second">Second double.</param>
            <param name="maxRelativeError">Size of the relative error factor. Typically 0.000000001
            or smaller.</param>
            <returns>True if first and second are equal, false otherwise.</returns>
        </member>
        <member name="M:BassUtils.DoubleExtensions.RelativeError(System.Double,System.Double)">
             <summary>
             Calculate the relative error between two doubles.
             Examples of relative errors (as returned by Reals.RelativeError():
             <code>
              first      second      RE
              ======= ======= =============
              1       100     0.99
              50      100     0.5
              90      100     0.1
              99      100     0.01
              100     100     0
              101     100     0.00990990099
              110     100     0.0909090909
              150     100     0.3333333333
              10,000  100     0.99
            
              99      100     0.01
              999     1000    0.001
              9999    10000   0.0001
              99999   100000  0.00001   
              999999  1000000 0.000001
             </code>
             </summary>
             <param name="first">The first double.</param>
             <param name="second">The second double.</param>
             <returns>Relative error.</returns>
        </member>
        <member name="T:BassUtils.EncodingHelper">
            <summary>
            Utility methods to help with file/byte encoding issues.
            </summary>
        </member>
        <member name="M:BassUtils.EncodingHelper.BytesToString(System.Byte[],System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Convert bytes in one encoding to a string in another encoding.
            </summary>
            <param name="data">The bytes to be converted.</param>
            <param name="sourceEncoding">The current encoding of the data.</param>
            <param name="targetEncoding">The desired encoding of the data.</param>
            <returns>The bytes converted to a string.</returns>
        </member>
        <member name="M:BassUtils.EncodingHelper.GuessEncodingFromByteOrderMark(System.String)">
            <summary>
            Try to guess the encoding of a file using the Bom. If the Bom is less than 4 bytes
            long then the default will be returned (you probably have an ASCII file that is less
            than 4 bytes long).
            </summary>
            <param name="fileName">Name of the file. The first 4 bytes will be read.</param>
            <returns>The encoding of the file, or the default if it could not be determined.</returns>
        </member>
        <member name="M:BassUtils.EncodingHelper.GuessEncodingFromByteOrderMark(System.Byte[])">
            <summary>
            Try to guess the encoding of a byte array using the Bom. If the Bom is less than 4 bytes
            long then the default will be returned (you probably have an ASCII file that is less
            than 4 bytes long).
            </summary>
            <param name="data">Byte array containing the byte order mark.</param>
            <returns>The encoding of the data, or the default if it could not be determined.</returns>
        </member>
        <member name="M:BassUtils.EncodingHelper.GuessEncodingFromByteOrderMark(System.Byte[],System.Text.Encoding)">
            <summary>
            Try to guess the encoding of a byte array using the Bom. If the Bom is less than 4 bytes
            long then the default will be returned (you probably have an ASCII file that is less
            than 4 bytes long).
            </summary>
            <param name="data">Byte array containing the Bom.</param>
            <param name="defaultIfUndetermined">If the encoding cannot be determined,
            what to return instead.</param>
            <returns>The encoding of the data, or the default if it could not be determined.</returns>
        </member>
        <member name="T:BassUtils.EncodingStringWriter">
            <summary>
            A subclass of StringWriter that allows the encoding to be set.
            </summary>
        </member>
        <member name="M:BassUtils.EncodingStringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider,System.Text.Encoding)">
            <summary>
            Construct a new <code>EncodingStringWriter</code> object.
            </summary>
            <param name="builder">StringBuilder used to back the writer.</param>
            <param name="formatProvider">Format provider.</param>
            <param name="encoding">Encoding to be used.</param>
        </member>
        <member name="P:BassUtils.EncodingStringWriter.Encoding">
            <summary>
            Gets the encoding in use.
            </summary>
        </member>
        <member name="T:BassUtils.IEnumerableExtensions">
            <summary>
            Extensions to <code>IEnumerable of T</code>.
            </summary>
        </member>
        <member name="M:BassUtils.IEnumerableExtensions.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Split an enumerable into partitions of size N.
            </summary>
            <remarks>
            The input enumerable is only iterated over once and no temporary storage
            is allocated.
            </remarks>
            <typeparam name="T">The type of element in the input enumerable.</typeparam>
            <param name="input">The enumerable to partition.</param>
            <param name="size">The desired number of elements in each partition.</param>
            <returns>An enumerable of enumerables, each child enumerable being at most <paramref name="size"/> elements in length.</returns>
        </member>
        <member name="M:BassUtils.IEnumerableExtensions.AsDataReader``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Wraps the IEnumerable in a DbDataReader, having one column for each "scalar" property of the type T.  
            The collection will be enumerated as the client calls IDataReader.Read().
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:BassUtils.IEnumerableExtensions.AsDataReader``1(System.Collections.Generic.IEnumerable{``0},BassUtils.NullConversion)">
            <summary>
            Wraps the IEnumerable in a DbDataReader, having one column for each "scalar" property of the type T.  
            The collection will be enumerated as the client calls IDataReader.Read().
            </summary>
            <typeparam name="T">The element type of the collectin.</typeparam>
            <param name="collection">A collection to wrap in a DataReader</param>
            <param name="nullConversion">Whether to convert nulls.</param>
            <returns>An IDataReader wrapping the collection.</returns>
        </member>
        <member name="M:BassUtils.IEnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an IEnumerable into a HashSet.
            </summary>
            <typeparam name="T">The element type of the collectin.</typeparam>
            <param name="collection">The collection of items.</param>
            <returns>A new HashSet containing all the items.</returns>
        </member>
        <member name="T:BassUtils.IndentingStringBuilder">
            <summary>
            The IndentingStringBuilder is a wrapper around the standard StringBuilder
            that automatically adds indentation when you add a new line. The amount
            of indentation is setup upon construction.
            </summary>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.#ctor">
            <summary>
            Creates a new IndentingStringBuilder using the default indentation (4 spaces).
            </summary>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.#ctor(System.String)">
            <summary>
            Creates a new IndentingStringBuilder using the specified indentation.
            </summary>
            <param name="indentation">The string to use for indentation.</param>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.#ctor(System.Int32)">
            <summary>
            Creates a new IndentingStringBuilder with the specified capacity and the default indentation (4 spaces).
            </summary>
            <param name="capacity">Initial string builder capacity.</param>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new IndentingStringBuilder with the specified capacity and indentation.
            </summary>
            <param name="capacity">Initial string builder capacity.</param>
            <param name="indentation">The string to use for indentation.</param>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.#ctor(System.String,System.String)">
            <summary>
            Creates a new IndentingStringBuilder with an initial value and indentation.
            </summary>
            <param name="value">Initial value for the string builder.</param>
            <param name="indentation">The string to use for indentation.</param>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new IndentingStringBuilder with the specified capacity and maximum capacity.
            </summary>
            <param name="capacity">Initial string builder capacity.</param>
            <param name="maxCapacity">Maximum allowed string builder capacity.</param>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new IndentingStringBuilder with the specified capacity, maximum capacity and indentation.
            </summary>
            <param name="capacity">Initial string builder capacity.</param>
            <param name="maxCapacity">Maximum allowed string builder capacity.</param>
            <param name="indentation">The string to use for indentation.</param>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new IndentingStringBuilder with the specified initial value and capacity.
            </summary>
            <param name="value">Initial value for the string builder.</param>
            <param name="capacity">Initial string builder capacity.</param>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Creates a new IndentingStringBuilder with the specified initial value, capacity and indentation.
            </summary>
            <param name="value">Initial value for the string builder.</param>
            <param name="capacity">Initial string builder capacity.</param>
            <param name="indentation">The string to use for indentation.</param>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new IndentingStringBuilder with the specified substring, capacity and default indentation.
            </summary>
            <param name="value">String to take substring of.</param>
            <param name="startIndex">Where to start the substring.</param>
            <param name="length">How many characters to take.</param>
            <param name="capacity">Initial string builder capacity.</param>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new IndentingStringBuilder with the specified substring, capacity and indentation.
            </summary>
            <param name="value">String to take substring of.</param>
            <param name="startIndex">Where to start the substring.</param>
            <param name="length">How many characters to take.</param>
            <param name="capacity">Initial string builder capacity.</param>
            <param name="indentation">The string to use for indentation.</param>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Indent">
            <summary>
            Increases the indentation level by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.OutDent">
            <summary>
            Decreases the indentation level by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.ToString">
            <summary>
            Converts the value of this instance to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.Boolean)">
            <summary>
            Appends the string representation of a specified Boolean value to this instance.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.Byte)">
            <summary>
            Appends the string representation of a specified Byte value to this instance.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.Char)">
            <summary>
            Appends the string representation of a specified Char value to this instance.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.Char[])">
            <summary>
            Appends the string representation of the Unicode characters in a specified
            array to this instance.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.Decimal)">
            <summary>
            Appends the string representation of a specified Decimal value to this instance.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.Double)">
            <summary>
            Appends the string representation of a specified Double value to this instance.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.Single)">
            <summary>
            Appends the string representation of a specified Float value to this instance.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.Int32)">
            <summary>
            Appends the string representation of a specified Int32 value to this instance.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.Int64)">
            <summary>
            Appends the string representation of a specified Int64 value to this instance.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.Object)">
            <summary>
            Appends the string representation of a specified value to this instance.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.Int16)">
            <summary>
            Appends the string representation of a specified Int16 value to this instance.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.SByte)">
            <summary>
            Appends the string representation of a specified sbyte value to this instance.
            This is a VB type, and is not CLSCompliant.
            The System.Text.StringBuilder class is the same.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.UInt32)">
            <summary>
            Appends the string representation of a specified uint value to this instance.
            This is a VB type, and is not CLSCompliant.
            The System.Text.StringBuilder class is the same.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.UInt64)">
            <summary>
            Appends the string representation of a specified ulong value to this instance.
            This is a VB type, and is not CLSCompliant.
            The System.Text.StringBuilder class is the same.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.UInt16)">
            <summary>
            Appends the string representation of a specified ushort value to this instance.
            This is a VB type, and is not CLSCompliant.
            The System.Text.StringBuilder class is the same.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.Append(System.String)">
            <summary>
            Appends the string value to this instance.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.AppendLine">
            <summary>
            Appends the default line terminator to the end of the current object.
            </summary>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.AppendLine(System.String)">
            <summary>
            Appends the string value to this instance and then appends the default line terminator.
            </summary>
            <param name="value">The value to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.AppendFormat(System.String,System.Object)">
            <summary>
            Appends the string returned by processing a composite format string, which
            contains zero or more format items, to this instance. Each format item is
            replaced by the string representation of a single argument.
            </summary>
            <param name="format">A format string.</param>
            <param name="arg0">An object to format.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.AppendFormat(System.String,System.Object,System.Object)">
            <summary>
            Appends the string returned by processing a composite format string, which
            contains zero or more format items, to this instance. Each format item is
            replaced by the string representation of either of two arguments.
            </summary>
            <param name="format">A format string.</param>
            <param name="arg0">An object to format.</param>
            <param name="arg1">An object to format.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Appends the string returned by processing a composite format string, which
            contains zero or more format items, to this instance. Each format item is
            replaced by the string representation of either of three arguments.
            </summary>
            <param name="format">A format string.</param>
            <param name="arg0">An object to format.</param>
            <param name="arg1">An object to format.</param>
            <param name="arg2">An object to format.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.AppendFormat(System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more
            format items, to this instance. Each format item is replaced by the string representation of a
            corresponding argument in a parameter array.
            </summary>
            <param name="format">A format string.</param>
            <param name="args">An array of objects to format.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:BassUtils.IndentingStringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more
            format items, to this instance. Each format item is replaced by the string representation of a
            corresponding argument in a parameter array.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A format string.</param>
            <param name="args">An array of objects to format.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="P:BassUtils.IndentingStringBuilder.IndentationLevel">
            <summary>
            Gets or set the IndentationLevel (a number from 0..N).
            </summary>
        </member>
        <member name="P:BassUtils.IndentingStringBuilder.Capacity">
            <summary>
            Gets or sets the maximum number of characters that can be contained in the
            memory allocated by the current instance.
            </summary>
        </member>
        <member name="P:BassUtils.IndentingStringBuilder.Length">
            <summary>
            Gets or sets the length of the current IndentingStringBuilder object.
            </summary>
        </member>
        <member name="P:BassUtils.IndentingStringBuilder.MaxCapacity">
            <summary>
            Gets the maximum capacity of this instance.
            </summary>
        </member>
        <member name="P:BassUtils.IndentingStringBuilder.Item(System.Int32)">
            <summary>
            Gets or sets the character at the specified character position in this instance.
            </summary>
            <param name="index">The position of the character.</param>
            <returns>The Unicode character at position index.</returns>
        </member>
        <member name="T:BassUtils.IniParser">
            <summary>
            Dead simple class to read INI files.
            Based on https://gist.github.com/grumly57/5725301
            Better than NINI because it allows double quotes in values and I've
            hacked it to support multiple line values.
            There is an IniSection class which is defined at the bottom of
            this file. The entire file is self contained.
            </summary>
        </member>
        <member name="M:BassUtils.IniParser.#ctor(System.String)">
            <summary>
            Initialize an INI file from a string.
            </summary>
            <param name="iniData">The INI data content (such as the text read from a file).</param>
        </member>
        <member name="M:BassUtils.IniParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize an INI file from a string.
            </summary>
            <param name="iniData">The INI data content (such as the text read from a file).</param>
            <param name="coalesceLineContinuations">If true, the parser will consider a slash '\' at the
            end of a line to be a line continuation, and remove it before parsing, forming the
            value into one long string.</param>
        </member>
        <member name="M:BassUtils.IniParser.GetValue(System.String)">
            <summary>
            Get a parameter value at the root level.
            </summary>
            <param name="key">Parameter key.</param>
            <returns>Value of the <paramref name="key"/>.</returns>
        </member>
        <member name="M:BassUtils.IniParser.GetValue(System.String,System.String)">
            <summary>
            Get a parameter value in a section.
            </summary>
            <param name="section">Name of the section.</param>
            <param name="key">Parameter key.</param>
            <returns>Value of the <paramref name="key"/>.</returns>
        </member>
        <member name="M:BassUtils.IniParser.GetValue(System.String,System.String,System.String)">
            <summary>
            Get a parameter value in a section with a default value if not found.
            </summary>
            <param name="section">Name of the section.</param>
            <param name="key">Parameter key.</param>
            /// <param name="defaultIfNotFound">Default to be returned if no value found.</param>
            <returns>Value of the <paramref name="key"/>.</returns>
        </member>
        <member name="M:BassUtils.IniParser.GetKeys(System.String)">
            <summary>
            Get all the keys names in a section.
            </summary>
            <param name="section">Name of the section.</param>
            <returns>Sequence of key names.</returns>
        </member>
        <member name="P:BassUtils.IniParser.Sections">
            <summary>
            Get all the section names.
            </summary>
            <returns>Sequence of section names.</returns>
        </member>
        <member name="T:BassUtils.IniSection">
            <summary>
            Represents one section of the INI file.
            </summary>
        </member>
        <member name="M:BassUtils.IniSection.#ctor(System.String)">
            <summary>
            Creates a new IniSection.
            </summary>
            <param name="name">Name of the section.</param>
        </member>
        <member name="M:BassUtils.IniSection.Add(System.String,System.String)">
            <summary>
            Adds a new key-value to the section.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:BassUtils.IniSection.ContainsKey(System.String)">
            <summary>
            Returns whether the section has a particular key.
            </summary>
            <param name="key">The key.</param>
            <returns>True if the section has the key, false otherwise.</returns>
        </member>
        <member name="M:BassUtils.IniSection.Remove(System.String)">
            <summary>
            Removes a key from the section.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>True if the key was successfully removed from the section, false otherwise.
            This method also returns false if item is not found in section.
            </returns>
        </member>
        <member name="M:BassUtils.IniSection.TryGetValue(System.String,System.String@)">
            <summary>
            Trys to get the value associated with a particular key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value. Only valid if the method returns true.</param>
            <returns>True if the key exists in the section, false otherwise.</returns>
        </member>
        <member name="M:BassUtils.IniSection.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds a new key-value pair to the section.
            </summary>
            <param name="item">The key-value parir to add.</param>
        </member>
        <member name="M:BassUtils.IniSection.Clear">
            <summary>
            Clears the section (removes all keys and values).
            </summary>
        </member>
        <member name="M:BassUtils.IniSection.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Checks to see if the section contains the specified key-value pair.
            </summary>
            <param name="item">The key-value parir to check for.</param>
            <returns>True if the section contains the key-value pair, false otherwise.</returns>
        </member>
        <member name="M:BassUtils.IniSection.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copies the keys and values in the section to an array starting at a specified index.
            The array must be large enough to receieve all items.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index to start copying to.</param>
        </member>
        <member name="M:BassUtils.IniSection.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes a key-value pair from the section.
            </summary>
            <param name="item">The key-value pair to remove.</param>
            <returns>True if item was successfully removed from the section, false otherwise.
            This method also returns false if the item is not found in section.
            </returns>
        </member>
        <member name="M:BassUtils.IniSection.GetEnumerator">
            <summary>
            Gets an enumerator over the section.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="M:BassUtils.IniSection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator over the section.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="P:BassUtils.IniSection.Name">
            <summary>
            Returns the name of the section.
            </summary>
        </member>
        <member name="P:BassUtils.IniSection.Keys">
            <summary>
            Gets all the keys in the section.
            </summary>
        </member>
        <member name="P:BassUtils.IniSection.Values">
            <summary>
            Gets all the values in the section.
            </summary>
        </member>
        <member name="P:BassUtils.IniSection.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value for that key.</returns>
        </member>
        <member name="P:BassUtils.IniSection.Count">
            <summary>
            Returns the number of keys in the section.
            </summary>
        </member>
        <member name="P:BassUtils.IniSection.IsReadOnly">
            <summary>
            Returns true if the section is read-only.
            </summary>
        </member>
        <member name="T:BassUtils.IntExtensions">
            <summary>
            Extensions to the <code>Int32</code> class.
            </summary>
        </member>
        <member name="M:BassUtils.IntExtensions.Times(System.Int32)">
            <summary>
            Returns a range 0..count - 1.
            </summary>
            <param name="count">The upper boundary of the range (exlusive).</param>
            <returns>0, 1, 2, 3, ... count -1.</returns>
        </member>
        <member name="M:BassUtils.IntExtensions.Times(System.Int32,System.Action)">
            <summary>
            Executes an action <paramref name="count"/> times.
            </summary>
            <param name="count">The number of times to execute the action.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:BassUtils.IntExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Executes an action <paramref name="count"/> times, passing the index
            into the action each time.
            </summary>
            <param name="count">The number of times to execute the action.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="T:BassUtils.PredicateBuilder">
            <summary>
            Enables the efficient, dynamic composition of query predicates.
            From http://petemontgomery.wordpress.com/2011/02/10/a-universal-predicatebuilder/
            </summary>
        </member>
        <member name="M:BassUtils.PredicateBuilder.True``1">
            <summary>
            Creates a predicate that evaluates to true.
            </summary>
        </member>
        <member name="M:BassUtils.PredicateBuilder.False``1">
            <summary>
            Creates a predicate that evaluates to false.
            </summary>
        </member>
        <member name="M:BassUtils.PredicateBuilder.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a predicate expression from the specified lambda expression.
            </summary>
        </member>
        <member name="M:BassUtils.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines the first predicate with the second using the logical "and".
            </summary>
        </member>
        <member name="M:BassUtils.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines the first predicate with the second using the logical "or".
            </summary>
        </member>
        <member name="M:BassUtils.PredicateBuilder.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Negates the predicate.
            </summary>
        </member>
        <member name="M:BassUtils.PredicateBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Combines the first expression with the second using the specified merge function.
            </summary>
        </member>
        <member name="T:BassUtils.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BassUtils.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BassUtils.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:BassUtils.Properties.Resources.ArgVal_DirectoryDoesNotExist">
            <summary>
              Looks up a localized string similar to The directory {0} specified in parameter {1} does not exist..
            </summary>
        </member>
        <member name="P:BassUtils.Properties.Resources.ArgVal_FileDoesNotExist">
            <summary>
              Looks up a localized string similar to The file {0} specified in parameter {1} does not exist..
            </summary>
        </member>
        <member name="P:BassUtils.Properties.Resources.ArgVal_LessThan">
            <summary>
              Looks up a localized string similar to Cannot be less than {0}..
            </summary>
        </member>
        <member name="P:BassUtils.Properties.Resources.ArgVal_LessThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Cannot be less than or equal to {0}..
            </summary>
        </member>
        <member name="P:BassUtils.Properties.Resources.ArgVal_MoreThan">
            <summary>
              Looks up a localized string similar to Cannot be more than {0}..
            </summary>
        </member>
        <member name="P:BassUtils.Properties.Resources.ArgVal_MoreThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Cannot be more than or equal to {0}..
            </summary>
        </member>
        <member name="P:BassUtils.Properties.Resources.ArgVal_NotAnEnumeratedType">
            <summary>
              Looks up a localized string similar to The type {0} is not an enumerated type..
            </summary>
        </member>
        <member name="P:BassUtils.Properties.Resources.ArgVal_NotValidEnumeratedValue">
            <summary>
              Looks up a localized string similar to Not a valid member of enumeration {0}..
            </summary>
        </member>
        <member name="P:BassUtils.Properties.Resources.ArgVal_PathMustBeSpecified">
            <summary>
              Looks up a localized string similar to Path must be specified..
            </summary>
        </member>
        <member name="T:BassUtils.PropertyCopier">
            <summary>
            Copies properties from one object to another.
            </summary>
        </member>
        <member name="M:BassUtils.PropertyCopier.CopyProperties(System.Object,System.Object)">
            <summary>
            Copies all possible property values from <paramref name="source"/> to <paramref name="destination"/>.
            Properties are matched by name, and the property on the destination must have a setter and
            a type that is compatible with the source.
            </summary>
            <param name="source">Object to copy properties from.</param>
            <param name="destination">Object to copy properties to.</param>
        </member>
        <member name="T:BassUtils.SchemaException">
            <summary>
            Indicates an exception with data schema, for example with checking
            column names or parsing schema.
            </summary>
        </member>
        <member name="M:BassUtils.SchemaException.#ctor">
            <summary>
            Construct a new exception.
            </summary>
        </member>
        <member name="M:BassUtils.SchemaException.#ctor(System.String)">
            <summary>
            Construct a new exception.
            </summary>
            <param name="message">Message to use.</param>
        </member>
        <member name="M:BassUtils.SchemaException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a new exception.
            </summary>
            <param name="message">Message to use.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:BassUtils.SchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct a new exception using a serialization context.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaing context.</param>
        </member>
        <member name="T:BassUtils.SqlBulkCopyExtensions">
            <summary>
            Extension methods for the SqlBulkCopy class.
            </summary>
        </member>
        <member name="M:BassUtils.SqlBulkCopyExtensions.TotalRowsCopied(System.Data.SqlClient.SqlBulkCopy)">
            <summary>
            Retrieve the total number of rows copied in a SqlBulkCopy operation.
            </summary>
            <param name="bulkCopy">The bulk copy object.</param>
            <returns>Total number of rows copied.</returns>
        </member>
        <member name="T:BassUtils.SqlName">
            <summary>
            Represents a quoted name of a SQL object.
            Pass in a .-separated string, e.g. "Database.Schema.TableName".
            The name can have between 1 and 4 parts, the latter meaning a
            linked-server object.
            </summary>
        </member>
        <member name="F:BassUtils.SqlName.MSSqlLeftQuote">
            <summary>
            The left-hand character used by MS SQL to quote identifiers.
            </summary>
        </member>
        <member name="F:BassUtils.SqlName.MSSqlRightQuote">
            <summary>
            The right-hand character used by MS SQL to quote identifiers.
            </summary>
        </member>
        <member name="M:BassUtils.SqlName.#ctor(System.String)">
            <summary>
            Constructs a new SqlName using the MS SQL quote characters.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:BassUtils.SqlName.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a new <c>SqlName</c> using the specified quote characters.
            </summary>
            <param name="name">Name.</param>
            <param name="leftQuote">Left hand side quote.</param>
            <param name="rightQuote">Right hand side quote.</param>
        </member>
        <member name="M:BassUtils.SqlName.ToString">
            <summary>
            Returns the smallest possible quoted name (i.e. omitting blank parts)
            of the object.
            </summary>
            <returns>Name.</returns>
        </member>
        <member name="M:BassUtils.SqlName.TrimSqlQuotes(System.String)">
            <summary>
            Removes the "[" and "]" SQL quote characters if they exist.
            </summary>
            <param name="name">SQL name. Can be 1, 2 or N part.</param>
            <returns>Name with the "[" and "]" removed.</returns>
        </member>
        <member name="M:BassUtils.SqlName.TrimSqlQuotes(System.String,System.String,System.String)">
            <summary>
            Removes the left and right SQL quote characters if they exist.
            </summary>
            <param name="name">SQL name. Can be 1, 2 or N part.</param>
            <param name="leftQuote">Left quote character.</param>
            <param name="rightQuote">Right quote character.</param>
            <returns>Name with the quotes removed.</returns>
        </member>
        <member name="P:BassUtils.SqlName.LeftQuote">
            <summary>
            The left hand side quote that the name was created with.
            </summary>
        </member>
        <member name="P:BassUtils.SqlName.RightQuote">
            <summary>
            The right hand side quote that the name was created with.
            </summary>
        </member>
        <member name="P:BassUtils.SqlName.LinkedName">
            <summary>
            The unquoted name of the linked server, or null.
            </summary>
        </member>
        <member name="P:BassUtils.SqlName.DatabaseName">
            <summary>
            The unquoted name of the database, or null.
            </summary>
        </member>
        <member name="P:BassUtils.SqlName.SchemaName">
            <summary>
            The unquoted name of the schema, or null.
            </summary>
        </member>
        <member name="P:BassUtils.SqlName.Name">
            <summary>
            The unquoted name of the object, or null.
            </summary>
        </member>
        <member name="P:BassUtils.SqlName.OnePartName">
            <summary>
            Returns the quoted one-part-name, consisting of just the <code>Name</code>.
            </summary>
        </member>
        <member name="P:BassUtils.SqlName.TwoPartName">
            <summary>
            Returns the quoted two-part-name, consisting of just the <code>SchemaName</code>
            and the <code>Name</code>.
            </summary>
        </member>
        <member name="P:BassUtils.SqlName.ThreePartName">
            <summary>
            Returns the quoted three-part-name, consisting of the <code>DatabaseName</code>, <code>SchemaName</code>
            and the <code>Name</code>.
            </summary>
        </member>
        <member name="P:BassUtils.SqlName.FourPartName">
            <summary>
            Returns the quoted full four-part name of the object.
            </summary>
        </member>
        <member name="T:BassUtils.SqlParameterCollectionExtensions">
            <summary>
            Extensions to the <code>System.Data.SqlClient.SqlParameterCollection</code> class.
            </summary>
        </member>
        <member name="M:BassUtils.SqlParameterCollectionExtensions.NullifyAllParameters(System.Data.SqlClient.SqlParameterCollection)">
            <summary>
            Iterates over all the parameters in the collection and sets their value to <c>DBNull.Value</c>
            if they are (C#) <c>null</c>. This is a handy alternative to setting them as you go along, just
            call this method before you execute the command to ensure everything is set to <c>DBNull.Value</c>
            where it needs to be.
            </summary>
            <param name="parameters">The set of Sql Parameters.</param>
        </member>
        <member name="M:BassUtils.SqlParameterCollectionExtensions.AddWithNullableValue``1(System.Data.SqlClient.SqlParameterCollection,System.String,System.Nullable{``0})">
            <summary>
            Adds a parameter to the collection, inserting DbNull if the parameter is null.
            </summary>
            <typeparam name="T">The type of object to add.</typeparam>
            <param name="parameters">The parameters collection to add the new parameter to.</param>
            <param name="parameterName">The (SQL name) of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>The new SqlParameter object that was just added to the collection.</returns>
        </member>
        <member name="M:BassUtils.SqlParameterCollectionExtensions.AddString(System.Data.SqlClient.SqlParameterCollection,System.String,System.Int32,System.String)">
            <summary>
            Add a string of type 'varchar' to the collection.
            </summary>
            <param name="parameters">The parameters collection to add the new parameter to.</param>
            <param name="parameterName">The (SQL name) of the parameter.</param>
            <param name="size">The size of the string parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>The new SqlParameter object that was just added to the collection.</returns>
        </member>
        <member name="M:BassUtils.SqlParameterCollectionExtensions.AddNVString(System.Data.SqlClient.SqlParameterCollection,System.String,System.Int32,System.String)">
            <summary>
            When adding an nvarchar, size (for this method) is just the length of the column!
            </summary>
            <param name="parameters">The collection.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="size">The length of the column, as you typed it in SSMS.</param>
            <param name="value">The string value.</param>
            <returns>The new SqlParameter object that was just added to the collection.</returns>
        </member>
        <member name="M:BassUtils.SqlParameterCollectionExtensions.AddOutputId(System.Data.SqlClient.SqlParameterCollection)">
            <summary>
            Adds an output parameter named 'Id' of type <code>SqlDbType.Int</code> to the parameter collection.
            </summary>
            <param name="parameters">The collection.</param>
            <returns>The new SqlParameter object that was just added to the collection.</returns>
        </member>
        <member name="M:BassUtils.SqlParameterCollectionExtensions.AddOutputId(System.Data.SqlClient.SqlParameterCollection,System.String,System.Data.SqlDbType)">
            <summary>
            Adds an output parameter to the parameter collection.
            </summary>
            <param name="parameters">The collection.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterType">The type of the Id, typically SqlDbType.Int.</param>
            <returns>The new SqlParameter object that was just added to the collection.</returns>
        </member>
        <member name="T:BassUtils.StreamExtensions">
            <summary>
            Extensions to the <code>System.IO.Stream</code> class.
            </summary>
        </member>
        <member name="M:BassUtils.StreamExtensions.ReadFully(System.IO.Stream)">
            <summary>
            Completely reads a stream from its current position and returns the data as an array of bytes.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>Array of bytes from the stream.</returns>
        </member>
        <member name="T:BassUtils.StringBuilderExtensions">
            <summary>
            Contains extensions for the StringBuilder class.
            </summary>
        </member>
        <member name="M:BassUtils.StringBuilderExtensions.EndsWith(System.Text.StringBuilder,System.Char)">
            <summary>
            Check to see whether a StringBuilder ends with a particular character.
            Empty builders always return false.
            </summary>
            <param name="builder">The StringBuilder.</param>
            <param name="value">The character to look for.</param>
            <returns>True if the builder ends with the character, false otherwise.</returns>
        </member>
        <member name="M:BassUtils.StringBuilderExtensions.EndsWith(System.Text.StringBuilder,System.String)">
            <summary>
            Check to see whether a StringBuilder ends with a particular string.
            Empty builders and empty values always return false.
            </summary>
            <remarks>If your string is a single character, the overload using a character value
            is more efficient as it avoids a string allocation.</remarks>
            <param name="builder">The StringBuilder.</param>
            <param name="value">The string to look for.</param>
            <returns>True if the builder ends with the string, false otherwise.</returns>
        </member>
        <member name="M:BassUtils.StringBuilderExtensions.EndsWith(System.Text.StringBuilder,System.String,System.StringComparison)">
            <summary>
            Check to see whether a StringBuilder ends with a particular string.
            Empty builders and empty values always return false.
            </summary>
            <param name="builder">The StringBuilder.</param>
            <param name="value">The string to look for.</param>
            <param name="comparisonType">String comparison type to use when checking to see if
            the builder ends with the value.</param>
            <returns>True if the builder ends with the string, false otherwise.</returns>
        </member>
        <member name="M:BassUtils.StringBuilderExtensions.AppendIfDoesNotEndWith(System.Text.StringBuilder,System.Char)">
            <summary>
            Appends a character to the <paramref name="builder"/>, but only if the builder does not already
            end with that character. This is useful for building up lists.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The character to append.</param>
            <returns>The builder that was passed in, to enable chaining.</returns>
        </member>
        <member name="M:BassUtils.StringBuilderExtensions.AppendIfDoesNotEndWith(System.Text.StringBuilder,System.String)">
            <summary>
            Appends a string to the <paramref name="builder"/>, but only if the builder does not already
            end with that string. This is useful for building up lists.
            </summary>
            <remarks>If your string is a single character, the overload using a character value
            is more efficient as it avoids a string allocation.</remarks>
            <param name="builder">The builder.</param>
            <param name="value">The character to append.</param>
            <returns>The builder that was passed in, to enable chaining.</returns>
        </member>
        <member name="M:BassUtils.StringBuilderExtensions.AppendIfDoesNotEndWith(System.Text.StringBuilder,System.String,System.StringComparison)">
            <summary>
            Appends a string to the <paramref name="builder"/>, but only if the builder does not already
            end with that string. This is useful for building up lists.
            </summary>
            <remarks>If your string is a single character, the overload using a character value
            is more efficient as it avoids a string allocation.</remarks>
            <param name="builder">The builder.</param>
            <param name="value">The character to append.</param>
            <param name="comparisonType">String comparison type to use when checking to see if
            the builder ends with the value.</param>
            <returns>The builder that was passed in, to enable chaining.</returns>
        </member>
        <member name="M:BassUtils.StringBuilderExtensions.TrimAppend(System.Text.StringBuilder,System.String)">
            <summary>
            Trims <paramref name="value"/> before appending it. The value cannot be null.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The value to trim and append.</param>
            <returns>The builder that was passed in, to enable chaining.</returns>
        </member>
        <member name="M:BassUtils.StringBuilderExtensions.AppendCSV(System.Text.StringBuilder,System.Object[])">
            <summary>
            Appends <paramref name="args"/> in a "CSV style" to the end of the builder.
            See the <see cref="T:BassUtils.CSVOptions"/> class for ways to control the appending.
            This overload uses the default options.
            </summary>
            <param name="builder">The builder to append to.</param>
            <param name="args">The arguments to append.</param>
            <returns>The builder that was passed in, to enable chaining.</returns>
        </member>
        <member name="M:BassUtils.StringBuilderExtensions.AppendCSV(System.Text.StringBuilder,BassUtils.CSVOptions,System.Object[])">
            <summary>
            Appends <paramref name="args"/> in a "CSV style" to the end of the builder.
            See the <see cref="T:BassUtils.CSVOptions"/> class for ways to control the appending.
            </summary>
            <param name="builder">The builder to append to.</param>
            <param name="options">Options to control the appending.</param>
            <param name="args">The arguments to append.</param>
            <returns>The builder that was passed in, to enable chaining.</returns>
        </member>
        <member name="T:BassUtils.StringExtensions">
            <summary>
            Various handy string extensions.
            </summary>
        </member>
        <member name="M:BassUtils.StringExtensions.PadAndAlign(System.String,System.Int32)">
            <summary>
            Left aligns <paramref name="value"/> and pads with spaces to the specified <paramref name="width"/>.
            </summary>
            <param name="value">The input text.</param>
            <param name="width">The final width of the text.</param>
            <returns>Padded result.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.PadAndAlign(System.String,System.Int32,System.Int32)">
            <summary>
            Left aligns <paramref name="value"/> and pads with spaces to the specified <paramref name="minWidth"/>,
            but trims the output if it exceeds <paramref name="maxWidth"/>.
            </summary>
            <param name="value">The input text.</param>
            <param name="minWidth">The minimum width of the result.</param>
            <param name="maxWidth">The maximum width of the result.</param>
            <returns>Padded result.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.PadAndAlign(System.String,System.Int32,System.Int32,BassUtils.PaddingAlignment)">
            <summary>
            Applies the specified <paramref name="alignment"/> to <paramref name="value"/> and pads 
            with spaces to the specified <paramref name="minWidth"/>, but trims the output if it 
            exceeds <paramref name="maxWidth"/>.
            </summary>
            <param name="value">The input text.</param>
            <param name="minWidth">The minimum width of the result.</param>
            <param name="maxWidth">The maximum width of the result.</param>
            <param name="alignment">The alignment of the text.</param>
            <returns>Padded result.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.PadAndAlign(System.String,System.Int32,System.Int32,BassUtils.PaddingAlignment,System.Char)">
            <summary>
            Applies the specified <paramref name="alignment"/> to <paramref name="value"/> and pads 
            with <paramref name="paddingCharacter"/> to the specified <paramref name="minWidth"/>, but trims the output if it 
            exceeds <paramref name="maxWidth"/>.
            </summary>
            <param name="value">The input text.</param>
            <param name="minWidth">The minimum width of the result.</param>
            <param name="maxWidth">The maximum width of the result.</param>
            <param name="alignment">The alignment of the text.</param>
            <param name="paddingCharacter">The character to pad with.</param>
            <returns>Padded result.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.Before(System.String,System.String)">
            <summary>
            Returns the characters before the first occurence of <paramref name="separator"/>.
            The search for <paramref name="separator"/> is case-insensitive.
            If <paramref name="separator"/> does not occur in <paramref name="value"/> or
            <paramref name="value"/> is null then null is returned.
            </summary>
            <param name="value">The text to search.</param>
            <param name="separator">The value to search for.</param>
            <returns>The portion of text before the value.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.Before(System.String,System.String,System.StringComparison)">
            <summary>
            Returns the characters before the first occurence of <paramref name="separator"/>.
            If <paramref name="separator"/> does not occur in <paramref name="value"/> or
            <paramref name="value"/> is null then null is returned.
            </summary>
            <param name="value">The text to search.</param>
            <param name="separator">The value to search for.</param>
            <param name="comparisonType">Type of string comparison to apply.</param>
            <returns>The portion of text before the value.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.After(System.String,System.String)">
            <summary>
            Returns the characters after the first occurence of <paramref name="separator"/>.
            The search for <paramref name="separator"/> is case-insensitive.
            If <paramref name="separator"/> does not occur in <paramref name="value"/> or
            <paramref name="value"/> is null then null is returned.
            </summary>
            <param name="value">The text to search.</param>
            <param name="separator">The value to search for.</param>
            <returns>The portion of text after the value.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.After(System.String,System.String,System.StringComparison)">
            <summary>
            Returns the characters after the first occurence of <paramref name="separator"/>.
            If <paramref name="separator"/> does not occur in <paramref name="value"/> or
            <paramref name="value"/> is null then null is returned.
            </summary>
            <param name="value">The text to search.</param>
            <param name="separator">The value to search for.</param>
            <param name="comparisonType">Type of string comparison to apply.</param>
            <returns>The portion of text after the value.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.BeforeAndAfter(System.String,System.String,System.String@,System.String@)">
            <summary>
            Returns the characters both before and after the first occurrence of <paramref name="separator"/>.
            The search for <paramref name="separator"/> is case-insensitive.
            If <paramref name="separator"/> does not occur in <paramref name="value"/> or
            <paramref name="value"/> is null then null is returned.
            </summary>
            <param name="value">The text to search.</param>
            <param name="separator">The value to search for.</param>
            <param name="before">The portion of text before the search value.</param>
            <param name="after">The portion of text after the search value.</param>
        </member>
        <member name="M:BassUtils.StringExtensions.BeforeAndAfter(System.String,System.String,System.StringComparison,System.String@,System.String@)">
            <summary>
            Returns the characters both before and after the first occurrence of <paramref name="separator"/>.
            The search for <paramref name="separator"/> is case-insensitive.        /// 
            If <paramref name="separator"/> does not occur in <paramref name="value"/> or
            <paramref name="value"/> is null then null is returned.
            </summary>
            <param name="value">The text to search.</param>
            <param name="separator">The value to search for.</param>
            <param name="comparisonType">Type of string comparison to apply.</param>
            <param name="before">The portion of text before the search value.</param>
            <param name="after">The portion of text after the search value.</param>
        </member>
        <member name="M:BassUtils.StringExtensions.BeforeAndAfter(System.String,System.String)">
            <summary>
            Returns the characters both before and after the first occurrence of <paramref name="separator"/>.
            If <paramref name="separator"/> does not occur in <paramref name="value"/> or
            <paramref name="value"/> is null then null is returned.
            </summary>
            <param name="value">The text to search.</param>
            <param name="separator">The value to search for.</param>
            <returns>A 2-tuple, where the first item is the substring before the value, and the second item is the substring after the value.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.BeforeAndAfter(System.String,System.String,System.StringComparison)">
            <summary>
            Returns the characters both before and after the first occurrence of <paramref name="separator"/>.
            If <paramref name="separator"/> does not occur in <paramref name="value"/> or
            <paramref name="value"/> is null then null is returned.
            </summary>
            <param name="value">The text to search.</param>
            <param name="separator">The value to search for.</param>
            <param name="comparisonType">Type of string comparison to apply.</param>
            <returns>A 2-tuple, where the first item is the substring before the value, and the second item is the substring after the value.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Check to see whether <paramref name="value"/> contains <paramref name="valueToFind"/>, and
            allow you to specify whether it is case-sensitive or not.
            </summary>
            <param name="value">The text to search.</param>
            <param name="valueToFind">The value to search for.</param>
            <param name="comparisonType">Type of string comparison to apply.</param>
            <returns>True if text contains the value according to the comparisonType.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Replace all occurrences of <paramref name="valueToFind"/> in <paramref name="value"/>
            with <paramref name="replacement"/>.
            </summary>
            <param name="value">The text to search.</param>
            <param name="valueToFind">The string to replace.</param>
            <param name="replacement">The replacement value.</param>
            <param name="comparison">Type of string comparison to apply.</param>
            <returns>String with appropriate replacements made.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.MatchesFileGlobPattern(System.String,System.String)">
            <summary>
            Checks <paramref name="value"/> to see whether it matches the file-globbing
            pattern in <paramref name="pattern"/>.
            </summary>
            <param name="value">The string to test.</param>
            <param name="pattern">The wildcard, where "*" means any sequence of characters, and "?" means any single character.</param>
            <returns><c>true</c> if the string matches the given pattern; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.ToProperCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the input string to proper case, i.e. initial caps and
            lowercase rest.
            </summary>
            See also http://msdn.microsoft.com/en-us/library/system.globalization.textinfo.totitlecase.aspx
            which has limitations.
            <remarks>
            </remarks>
            <param name="value">The string to convert.</param>
            <param name="culture">The culture to use for upper/lower-case conversion.</param>
            <returns>Proper cased string.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.SafeFormat(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Call String.Format in a safe fashion; if the number of args doesn't match the
            number of placeholders in the format string then just return the format string
            rather than throwing an exception.
            
            If the format string is null, String.Empty is returned.
            </summary>
            <param name="culture">Culture to use for formatting.</param>
            <param name="format">The format string.</param>
            <param name="args">Arguments to be substituted.</param>
            <returns>Formatted string, or the original string if the formatting fails.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.SafeTrim(System.String)">
            <summary>
            Safely apply the Trim() operation to a string.
            If <paramref name="value"/> is null then null is
            returned, else <code>toTrim.Trim() is returned.</code>
            Whitespace strings are converted to null.
            </summary>
            <param name="value">The string to trim. Can be null.</param>
            <returns>Trimmed string, or null.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.SafeTrim(System.String,System.Boolean)">
            <summary>
            Safely apply the Trim() operation to a string.
            If <paramref name="value"/> is null then null is
            returned, else <code>toTrim.Trim() is returned.</code>
            </summary>
            <param name="value">The string to trim. Can be null.</param>
            <param name="convertWhiteSpaceToNull">Whether to convert whitespace strings to null.</param>
            <returns>Trimmed string, or null.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.SplitCamelCaseIntoWords(System.String)">
            <summary>
            Given a string InCamelCaseLikeThis, split it into words
            separated by a space.
            </summary>
            <param name="value">The string to split.</param>
            <returns>String with spaces inserted at word breaks.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Return the leftmost characters of str. This function will not
            throw an exception if str is null or is shorter than length.
            If str is null then null is returned.
            </summary>
            <param name="value">The string to extract from.</param>
            <param name="length">The number of characters to extract. Can be zero.</param>
            <returns>Leftmost <paramref name="length"/> characters of <paramref name="value"/>.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Return the rightmost characters of str. This function will not
            throw an exception if str is null or is shorter than length.
            If str is null then null is returned.
            </summary>
            <param name="value">The string to extract from.</param>
            <param name="length">The number of characters to extract.</param>
            <returns>Rightmost <paramref name="length"/> characters of <paramref name="value"/>.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.GetLeadingNumber``1(System.String)">
            <summary>
            Returns a leading number from a string such as "123Hello", using the InvariantCulture
            for conversion.
            </summary>
            <typeparam name="T">The type of number to return.</typeparam>
            <param name="value">The value to extract the number from.</param>
            <returns>Leading number.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.GetLeadingNumber``1(System.String,System.IFormatProvider)">
            <summary>
            Returns a leading number from a string such as "123Hello".
            </summary>
            <typeparam name="T">The type of number to return.</typeparam>
            <param name="value">The value to extract the number from.</param>
            <param name="provider">Format provider to use for conversion.</param>
            <returns>Leading number.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.GetTrailingNumber``1(System.String)">
            <summary>
            Returns a trailing number from a string such as "Hello123", using the InvariantCulture
            for conversion.
            </summary>
            <typeparam name="T">The type of number to return.</typeparam>
            <param name="value">The value to extract the number from.</param>
            <returns>Leading number.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.GetTrailingNumber``1(System.String,System.IFormatProvider)">
            <summary>
            Returns a trailing number from a string such as "Hello123".
            </summary>
            <typeparam name="T">The type of number to return.</typeparam>
            <param name="value">The value to extract the number from.</param>
            <param name="provider">Format provider to use for conversion.</param>
            <returns>Leading number.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.RemoveInvalidFileNameCharacters(System.String)">
            <summary>
            Removes characters that are invalid in Windows filenames from a string.
            </summary>
            <param name="value">The string to remove characters from.</param>
            <returns>New string with invalid filename characters removed.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
            Repeats <paramref name="value"/> <paramref name="count"/> times.
            </summary>
            <param name="value">The string to repeat. Must not be null.</param>
            <param name="count">The number of times to repeat. Must be 0 or more.</param>
            <returns>Repeated string.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.ToList``1(System.String,System.String,System.Boolean)">
            <summary>
            Converts a delimited string to a list of objects of the requested type.
            </summary>
            <typeparam name="T">Type of thing in the output list.</typeparam>
            <param name="value">The input string. Can be null or empty, which results in an empty list.</param>
            <param name="delimiter">The delimiter.</param>
            <param name="allowDuplicates">Whether to allow duplicates in the result.</param>
            <returns>List of things.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.ToList``1(System.String,System.Func{System.String,``0},System.String,System.Boolean)">
            <summary>
            Converts a delimited string to a list of objects of the requested type,
            using a specified conversion function.
            </summary>
            <typeparam name="T">Type of thing in the output list.</typeparam>
            <param name="value">The input string. Can be null or empty, which results in an empty list.</param>
            <param name="converter">A function to convert strings to objects of type <c>T</c>.</param>
            <param name="delimiter">The delimiter.</param>
            <param name="allowDuplicates">Whether to allow duplicates in the result.</param>
            <returns>List of things.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.SetChar(System.String,System.Int32,System.Char)">
            <summary>
            Change a character in a string.
            If you need to change many characters, it is probably best to use a StringBuilder.
            </summary>
            <param name="value">The string to change in.</param>
            <param name="index">The index of the character. An exception results if the index is not in range.</param>
            <param name="newChar">The new character.</param>
            <returns>New string with character replaced.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.AppendIfDoesNotEndWith(System.String,System.Char)">
            <summary>
            Appends a character to the <paramref name="value"/>, but only if the value does not already
            end with that character. This is useful for building up lists.
            </summary>
            <param name="value">The string to append to.</param>
            <param name="charToAppend">The character to append.</param>
            <returns>The appended (or not, as the case may be), string.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.AppendIfDoesNotEndWith(System.String,System.String)">
            <summary>
            Appends a string to the <paramref name="value"/>, but only if the value does not already
            end with that string. This is useful for building up lists.
            </summary>
            <param name="value">The string to append to.</param>
            <param name="valueToAppend">The string to append.</param>
            <returns>The appended (or not, as the case may be), string.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.AppendIfDoesNotEndWith(System.String,System.String,System.StringComparison)">
            <summary>
            Appends a string to the <paramref name="value"/>, but only if the value does not already
            end with that string. This is useful for building up lists.
            </summary>
            <param name="value">The string to append to.</param>
            <param name="valueToAppend">The string to append.</param>
            <param name="comparisonType">String comparison type to use when checking to see if
            the string ends with the value.</param>
            <returns>The appended (or not, as the case may be), string.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.TrimAppend(System.String,System.String)">
            <summary>
            Trims <paramref name="valueToAppend"/> before appending it. The value cannot be null.
            </summary>
            <param name="value">The string to append to.</param>
            <param name="valueToAppend">The value to trim and append.</param>
            <returns>The appended string.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.AppendCSV(System.String,System.Object[])">
            <summary>
            Appends <paramref name="args"/> in a "CSV style" to the end of the <paramref name="value"/>.
            See the <see cref="T:BassUtils.CSVOptions"/> class for ways to control the appending.
            This overload uses the default options.
            </summary>
            <param name="value">The string to append to.</param>
            <param name="args">The arguments to append.</param>
            <returns>The appended string.</returns>
        </member>
        <member name="M:BassUtils.StringExtensions.AppendCSV(System.String,BassUtils.CSVOptions,System.Object[])">
            <summary>
            Appends <paramref name="args"/> in a "CSV style" to the end of the <paramref name="value"/>.
            See the <see cref="T:BassUtils.CSVOptions"/> class for ways to control the appending.
            </summary>
            <param name="value">The string to append to.</param>
            <param name="options">Options to control the appending.</param>
            <param name="args">The arguments to append.</param>
            <returns>The appended string.</returns>
        </member>
        <member name="T:BassUtils.TableAdapterBase">
            <summary>
            Transaction support for generated table adapters.
            </summary>
            <remarks>
            This class adds transaction support to table adapters. It is used by changing the base
            class of a table adapter from Component to this class. The implementation of this class
            then accesses the derived table adapter's properties through reflection.
            You should derive a project specific version from this base class.
            </remarks>
        </member>
        <member name="M:BassUtils.TableAdapterBase.BeginTransaction">
            <summary>
            Begins a transaction.
            </summary>
        </member>
        <member name="M:BassUtils.TableAdapterBase.CommitTransaction">
            <summary>
            Commits the current transaction.
            </summary>
        </member>
        <member name="M:BassUtils.TableAdapterBase.RollbackTransaction">
            <summary>
            Rolls back the current transaction.
            </summary>
        </member>
        <member name="M:BassUtils.TableAdapterBase.SetTimeout(System.Int32)">
            <summary>
            Sets the timeout (in seconds) on all the commands in the adapter.
            Can be useful to change this for long running commands.
            A timeout of 0 means "wait forever".
            <remarks>
            This is NOT the connection timeout, which is set in the connection
            string using the "Connect Timeout=xx" property, default for that
            is 30 seconds.
            </remarks>
            </summary>
            <param name="timeout">Command Timeout, in seconds.</param>
        </member>
        <member name="M:BassUtils.TableAdapterBase.Dispose(System.Boolean)">
            <summary>
            VERY IMPORTANT - must dispose of connections to return them to the pool.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:BassUtils.TableAdapterBase.Transaction">
            <summary>
            Transaction of this table adapter.
            </summary>
            <remarks>
            This property is used to share a transaction and its associated connection
            across multiple table adapters. The typical pattern is shown in the sample
            code below.
            </remarks>
            <example>
            XTableAdapter xta = new XTableAdapter();
            YTableAdapter yta = new YTableAdapter();
            
            xta.BeginTransation();
            yta.Transation = xta.Transaction;
            try
            {
                // perform xta and yta modifications here.
                xta.CommitTransaction();
            }
            catch( Exception )
            {
                xta.RollbackTransaction();
            }
            </example>
        </member>
        <member name="P:BassUtils.TableAdapterBase.SqlConnection">
            <summary>
            Gets or sets the current SqlConnection.
            </summary>
        </member>
        <member name="P:BassUtils.TableAdapterBase.Connection">
            <summary>
            Proxies the normally private Connection property.
            </summary>
        </member>
        <member name="P:BassUtils.TableAdapterBase.Adapter">
            <summary>
            Exposes the normally private Adapter property.
            </summary>
        </member>
        <member name="P:BassUtils.TableAdapterBase.CommandCollection">
            <summary>
            Exposes the normally private CommandCollection.
            </summary>
        </member>
        <member name="T:BassUtils.MemberInfoExtensions">
            <summary>
            Extensions to the <code>System.Reflection.MemberInfo</code> class.
            </summary>
        </member>
        <member name="M:BassUtils.MemberInfoExtensions.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Returns all the attributes of a member or type.
            </summary>
            <typeparam name="T">The type of the attribute.</typeparam>
            <param name="member">The member to get attributes of.</param>
            <returns>List of attributes. Can be empty. Will not be null.</returns>
        </member>
        <member name="T:BassUtils.ThrottledBlockingQueue">
            <summary>
            A worker queue that will execute actions in the background.
            Use it within a using statement, the thread of execution
            will not proceed beyond the last } until all actions
            have been processed.
            n.b. This class is quite old. Though still useful, TPL Dataflow might
            be a better choice in many circumstances.
            </summary>
        </member>
        <member name="M:BassUtils.ThrottledBlockingQueue.#ctor">
            <summary>
            Creates a new queue with a worker count equal to the number of processors
            and a capacity 4 times that.
            </summary>
        </member>
        <member name="M:BassUtils.ThrottledBlockingQueue.#ctor(System.Int32)">
            <summary>
            Creates a new queue with the specified worker count and a capacity
            4 times that.
            </summary>
            <param name="workerCount">Number of workers to create.</param>
        </member>
        <member name="M:BassUtils.ThrottledBlockingQueue.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new queue with the specified worker count and capacity.
            </summary>
            <param name="workerCount">Number of workers to create.</param>
            <param name="capacity">Capacity of the queue. Producers will be blocked when they
            call <c>Add</c> if the queue is at capacity.</param>
        </member>
        <member name="M:BassUtils.ThrottledBlockingQueue.Add(System.Action)">
            <summary>
            Add a new action to the queue. The action should be self-contained
            (i.e. thread-safe). This method will block if the queue is at capacity;
            this ensures that producers do not run far ahead of consumers (it is
            easy to create out of memory errors if that happens).
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:BassUtils.ThrottledBlockingQueue.Dispose">
            <summary>
            Disposes of the queue and wait until all remaining actions
            have been processed.
            </summary>
        </member>
        <member name="T:BassUtils.ValidatedNotNullAttribute">
            <summary>
            VS Code Analysis will not actually recognise the generic helper method
            (and possibly sometimes non-generics) as having checked parameters, so
            CA1062 warnings will not go away. By introducing this dummy attribute
            we can fool the code analysis engine, and stop it producing false
            warnings.
            </summary>
        </member>
        <member name="T:BassUtils.SqlBulkCopyDataReader">
            <summary>
            The SqlBulkCopyDataReader is used to wrap an existing IDataReader (which can be a BassUtils.ObjectDataReader)
            in order to upload the records to SQL Server using SqlBulkCopy. It adds the ability to report bulk
            upload errors due to column/size mismatches in a meaningful way, and optionally to trim long strings
            in your source data down to length, so that they fit in the destination table.
            Typical usage:
            <example>
            <code>
            using (var listingsReader = new ObjectDataReader&lt;ListingRow&gt;(listings))
            using (var bc = new SqlBulkCopy(conn) { DestinationTableName = "dbo.MyTable" })
            using (var valRdr = new SqlBulkCopyDataReader(listingsReader, conn, bc))
            {
                bc.WriteToServer(valRdr);
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.#ctor(System.Data.IDataReader,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopy,System.Boolean)">
            <summary>
            Construct a new SqlBulkCopyDataReader object.
            </summary>
            <param name="readerToWrap">The IDataReader to wrap. This is the reader that will actually be the true
            source of the data.</param>
            <param name="connection">SqlConnection to be used (required for performing queries for schema validation).</param>
            <param name="bulkCopy">The bulk copy object that will be used to insert data.</param>
            <param name="trimLongStringsInsteadOfThrowing">True if long strings in the readerToWrap should be
            trimmed down to fit in the target table. If false, overlong strings will cause an exception.</param>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.ValidateBulkCopySourceColumnMappings(System.Data.SqlClient.SqlBulkCopyColumnMappingCollection)">
            <summary>
            Check that every column specified in the mappings collection exists
            in the wrapped reader.
            </summary>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.Dispose">
            <summary>
            Disposes the data reader.
            </summary>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.Finalize">
            <summary>
            Disposes the data reader.
            </summary>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.NextResult">
            <summary>
            Advances the data reader to the next result, when reading the results of batch SQL statements.
            </summary>
            <returns>True if there are more rows; otherwise, false.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.Close">
            <summary>
            Closes the data reader.
            </summary>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.Read">
            <summary>
            Advances the data reader to the next record.
            </summary>
            <returns>True if there are more rows; false otherwise.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the boolean at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Boolean value.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetByte(System.Int32)">
            <summary>
            Gets the Byte at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Byte value.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer
            as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index within the row from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetChar(System.Int32)">
            <summary>
            Gets the char at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Char value.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer
            as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldoffset">The index within the row from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of characters read.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetData(System.Int32)">
            <summary>
            Returns an IDataReader for the specified column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>An IDataReader.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type information for the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The data type information for the specified field.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the DateTime at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>DateTime value.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the Decimal at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Decimal value.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the double at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Double value.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the System.Type information corresponding to the type of System.Object
            that would be returned from System.Data.IDataRecord.GetValue(System.Int32).
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The System.Type information corresponding to the type of System.Object that
            would be returned from System.Data.IDataRecord.GetValue(System.Int32).
            </returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the float at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Float value.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the Guid at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Guid value.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the Int16 (short) at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Int16 (short) value.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the Int32 at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Int32 value.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the Int64 at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Int64 value.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetName(System.Int32)">
            <summary>
            Gets the name of the column at ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Name of the field.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal for the column with the specified name.
            </summary>
            <param name="name">Name of the column.</param>
            <returns>Corresponding column ordinal.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetSchemaTable">
            <summary>
            Returns a System.Data.DataTable that describes the column metadata of the
            System.Data.IDataReader.
            </summary>
            <returns>A System.Data.DataTable that describes the column metadata.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetString(System.Int32)">
            <summary>
            Gets the string at column ordinal i.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>String value.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Value from column i.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.GetValues(System.Object[])">
            <summary>
            Populates an array of objects with the column values of the current record.
            </summary>
            <param name="values">An array of System.Object to copy the attribute fields into.</param>
            <returns>The number of instances of System.Object in the array.</returns>
        </member>
        <member name="M:BassUtils.SqlBulkCopyDataReader.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is null.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>True if the field is DbNull, false otherwise.</returns>
        </member>
        <member name="P:BassUtils.SqlBulkCopyDataReader.TrimLongStringsInsteadOfThrowing">
            <summary>
            If true, the <c>SqlBulkCopyDataReader</c> will trim input strings that are too
            long to fit in the destination column down to size rather than throwing an exception.
            </summary>
        </member>
        <member name="P:BassUtils.SqlBulkCopyDataReader.CurrentRecord">
            <summary>
            Returns the current record.
            </summary>
        </member>
        <member name="P:BassUtils.SqlBulkCopyDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
        </member>
        <member name="P:BassUtils.SqlBulkCopyDataReader.IsClosed">
            <summary>
            Returns true if the reader is closed.
            </summary>
        </member>
        <member name="P:BassUtils.SqlBulkCopyDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
        </member>
        <member name="P:BassUtils.SqlBulkCopyDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
            <returns>Number of columns.</returns>
        </member>
        <member name="P:BassUtils.SqlBulkCopyDataReader.Item(System.String)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="name">Name of the field.</param>
            <returns>Value from the column.</returns>
        </member>
        <member name="P:BassUtils.SqlBulkCopyDataReader.Item(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>Value from column i.</returns>
        </member>
        <member name="T:BassUtils.SerializationHelper">
            <summary>
            Utility methods to help with serializing and deserializing objects to/from XML.
            </summary>
        </member>
        <member name="M:BassUtils.SerializationHelper.SerializeObjectToXmlString``1(``0)">
            <summary>
            Serializes an object to an XML string using the <code>XmlSerializer</code> class.
            </summary>
            <typeparam name="T">Type of thing to serialize.</typeparam>
            <param name="value">The thing to serialize.</param>
            <returns>XML string represenation of the thing.</returns>
        </member>
        <member name="M:BassUtils.SerializationHelper.DeserializeXmlStringToObject``1(System.String)">
            <summary>
            Deserializes an object from an XML string using the <code>XmlSerializer</code> class.
            </summary>
            <typeparam name="T">Type of thing to deserialize.</typeparam>
            <param name="xml">The xml string containing the serialized object.</param>
            <returns>The deserialized object instance.</returns>
        </member>
        <member name="T:BassUtils.XmlWriterExtensions">
            <summary>
            Extensions to the <code>System.Xml.XmlWriter</code> class.
            </summary>
        </member>
        <member name="M:BassUtils.XmlWriterExtensions.WriteAttributeIfNonNull(System.Xml.XmlWriter,System.String,System.Object)">
            <summary>
            Writes an attribute, but only if the attribute is non-null.
            </summary>
            <param name="writer">The writer.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:BassUtils.XmlWriterExtensions.WriteAttributeIfNonNull(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Writes an attribute, but only if the attribute is non-null.
            </summary>
            <param name="writer">The writer.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:BassUtils.XmlWriterExtensions.WriteAttributeIfNonNull(System.Xml.XmlWriter,System.String,System.Nullable{System.Boolean})">
            <summary>
            Writes an attribute, but only if the attribute is non-null.
            </summary>
            <param name="writer">The writer.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:BassUtils.XmlWriterExtensions.WriteAttributeIfNonNull(System.Xml.XmlWriter,System.String,System.Nullable{System.Byte})">
            <summary>
            Writes an attribute, but only if the attribute is non-null.
            </summary>
            <param name="writer">The writer.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:BassUtils.XmlWriterExtensions.WriteAttributeIfNonNull(System.Xml.XmlWriter,System.String,System.Nullable{System.Int16})">
            <summary>
            Writes an attribute, but only if the attribute is non-null.
            </summary>
            <param name="writer">The writer.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:BassUtils.XmlWriterExtensions.WriteAttributeIfNonNull(System.Xml.XmlWriter,System.String,System.Nullable{System.Int32})">
            <summary>
            Writes an attribute, but only if the attribute is non-null.
            </summary>
            <param name="writer">The writer.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:BassUtils.XmlWriterExtensions.WriteAttributeIfNonNull(System.Xml.XmlWriter,System.String,System.Nullable{System.Int64})">
            <summary>
            Writes an attribute, but only if the attribute is non-null.
            </summary>
            <param name="writer">The writer.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:BassUtils.XmlWriterExtensions.WriteAttributeIfNonNull(System.Xml.XmlWriter,System.String,System.Nullable{System.Decimal},System.String)">
            <summary>
            Writes an attribute, but only if the attribute is non-null.
            </summary>
            <param name="writer">The writer.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <param name="format">Format string for the attribute.</param>
        </member>
        <member name="M:BassUtils.XmlWriterExtensions.WriteAttributeIfNonNull(System.Xml.XmlWriter,System.String,System.Nullable{System.Single},System.String)">
            <summary>
            Writes an attribute, but only if the attribute is non-null.
            </summary>
            <param name="writer">The writer.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <param name="format">Format string for the attribute.</param>
        </member>
        <member name="M:BassUtils.XmlWriterExtensions.WriteAttributeIfNonNull(System.Xml.XmlWriter,System.String,System.Nullable{System.Double},System.String)">
            <summary>
            Writes an attribute, but only if the attribute is non-null.
            </summary>
            <param name="writer">The writer.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <param name="format">Format string for the attribute.</param>
        </member>
        <member name="M:BassUtils.XmlWriterExtensions.WriteAttributeIfNonNull(System.Xml.XmlWriter,System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            Writes an attribute, but only if the attribute is non-null.
            </summary>
            <param name="writer">The writer.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <param name="format">Format string for the attribute.</param>
        </member>
        <member name="M:BassUtils.XmlWriterExtensions.WriteAttributeIfNonNull(System.Xml.XmlWriter,System.String,System.Nullable{System.Guid})">
            <summary>
            Writes an attribute, but only if the attribute is non-null.
            </summary>
            <param name="writer">The writer.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
    </members>
</doc>
